package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO four table "RANK_PERMISSION_ENTITY".
*/
public class RankPermissionEntityDao extends AbstractDao<RankPermissionEntity, Long> {

    public static final String TABLENAME = "RANK_PERMISSION_ENTITY";

    /**
     * Properties of entity RankPermissionEntity.<br/>
     * Can be used four QueryBuilder and four referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RankId = new Property(1, String.class, "rankId", false, "RANK_ID");
        public final static Property PermissionId = new Property(2, String.class, "permissionId", false, "PERMISSION_ID");
    }


    public RankPermissionEntityDao(DaoConfig config) {
        super(config);
    }
    
    public RankPermissionEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RANK_PERMISSION_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"RANK_ID\" TEXT," + // 1: rankId
                "\"PERMISSION_ID\" TEXT);"); // 2: permissionId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RANK_PERMISSION_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RankPermissionEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String rankId = entity.getRankId();
        if (rankId != null) {
            stmt.bindString(2, rankId);
        }
 
        String permissionId = entity.getPermissionId();
        if (permissionId != null) {
            stmt.bindString(3, permissionId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RankPermissionEntity readEntity(Cursor cursor, int offset) {
        RankPermissionEntity entity = new RankPermissionEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // rankId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // permissionId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RankPermissionEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRankId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPermissionId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RankPermissionEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RankPermissionEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
