package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "WXMESSAGE_ENTITY".
*/
public class WXMessageEntityDao extends AbstractDao<WXMessageEntity, Long> {

    public static final String TABLENAME = "WXMESSAGE_ENTITY";

    /**
     * Properties of entity WXMessageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WxMessageId = new Property(1, String.class, "wxMessageId", false, "WX_MESSAGE_ID");
        public final static Property WxTitle = new Property(2, String.class, "wxTitle", false, "WX_TITLE");
        public final static Property WxTime = new Property(3, String.class, "wxTime", false, "WX_TIME");
        public final static Property WxContent = new Property(4, String.class, "wxContent", false, "WX_CONTENT");
        public final static Property WxType = new Property(5, Integer.class, "wxType", false, "WX_TYPE");
        public final static Property IsRead = new Property(6, Integer.class, "isRead", false, "IS_READ");
    }


    public WXMessageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public WXMessageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WXMESSAGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"WX_MESSAGE_ID\" TEXT NOT NULL UNIQUE ," + // 1: wxMessageId
                "\"WX_TITLE\" TEXT," + // 2: wxTitle
                "\"WX_TIME\" TEXT," + // 3: wxTime
                "\"WX_CONTENT\" TEXT," + // 4: wxContent
                "\"WX_TYPE\" INTEGER," + // 5: wxType
                "\"IS_READ\" INTEGER);"); // 6: isRead
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WXMESSAGE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WXMessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getWxMessageId());
 
        String wxTitle = entity.getWxTitle();
        if (wxTitle != null) {
            stmt.bindString(3, wxTitle);
        }
 
        String wxTime = entity.getWxTime();
        if (wxTime != null) {
            stmt.bindString(4, wxTime);
        }
 
        String wxContent = entity.getWxContent();
        if (wxContent != null) {
            stmt.bindString(5, wxContent);
        }
 
        Integer wxType = entity.getWxType();
        if (wxType != null) {
            stmt.bindLong(6, wxType);
        }
 
        Integer isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindLong(7, isRead);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WXMessageEntity readEntity(Cursor cursor, int offset) {
        WXMessageEntity entity = new WXMessageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // wxMessageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // wxTitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // wxTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // wxContent
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // wxType
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // isRead
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WXMessageEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWxMessageId(cursor.getString(offset + 1));
        entity.setWxTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setWxTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setWxContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setWxType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIsRead(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WXMessageEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WXMessageEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
