package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO four table "CASHIER_DISPLAY_ENTITY".
*/
public class CashierDisplayEntityDao extends AbstractDao<CashierDisplayEntity, Long> {

    public static final String TABLENAME = "CASHIER_DISPLAY_ENTITY";

    /**
     * Properties of entity CashierDisplayEntity.<br/>
     * Can be used four QueryBuilder and four referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsOrderDisplay = new Property(1, Integer.class, "isOrderDisplay", false, "IS_ORDER_DISPLAY");
        public final static Property IsCheckoutDisplay = new Property(2, Integer.class, "isCheckoutDisplay", false, "IS_CHECKOUT_DISPLAY");
        public final static Property DisplayImageUrl = new Property(3, String.class, "displayImageUrl", false, "DISPLAY_IMAGE_URL");
    }


    public CashierDisplayEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CashierDisplayEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CASHIER_DISPLAY_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"IS_ORDER_DISPLAY\" INTEGER," + // 1: isOrderDisplay
                "\"IS_CHECKOUT_DISPLAY\" INTEGER," + // 2: isCheckoutDisplay
                "\"DISPLAY_IMAGE_URL\" TEXT);"); // 3: displayImageUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CASHIER_DISPLAY_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CashierDisplayEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer isOrderDisplay = entity.getIsOrderDisplay();
        if (isOrderDisplay != null) {
            stmt.bindLong(2, isOrderDisplay);
        }
 
        Integer isCheckoutDisplay = entity.getIsCheckoutDisplay();
        if (isCheckoutDisplay != null) {
            stmt.bindLong(3, isCheckoutDisplay);
        }
 
        String displayImageUrl = entity.getDisplayImageUrl();
        if (displayImageUrl != null) {
            stmt.bindString(4, displayImageUrl);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CashierDisplayEntity readEntity(Cursor cursor, int offset) {
        CashierDisplayEntity entity = new CashierDisplayEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // isOrderDisplay
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // isCheckoutDisplay
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // displayImageUrl
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CashierDisplayEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsOrderDisplay(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setIsCheckoutDisplay(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDisplayImageUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CashierDisplayEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CashierDisplayEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
