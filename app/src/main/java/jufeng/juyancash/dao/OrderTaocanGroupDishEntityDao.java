package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "ORDER_TAOCAN_GROUP_DISH_ENTITY".
*/
public class OrderTaocanGroupDishEntityDao extends AbstractDao<OrderTaocanGroupDishEntity, Long> {

    public static final String TABLENAME = "ORDER_TAOCAN_GROUP_DISH_ENTITY";

    /**
     * Properties of entity OrderTaocanGroupDishEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderTaocanGroupDishId = new Property(1, String.class, "orderTaocanGroupDishId", false, "ORDER_TAOCAN_GROUP_DISH_ID");
        public final static Property OrderId = new Property(2, String.class, "orderId", false, "ORDER_ID");
        public final static Property TaocanGroupDishId = new Property(3, String.class, "taocanGroupDishId", false, "TAOCAN_GROUP_DISH_ID");
        public final static Property TaocanGroupId = new Property(4, String.class, "taocanGroupId", false, "TAOCAN_GROUP_ID");
        public final static Property OrderDishId = new Property(5, String.class, "orderDishId", false, "ORDER_DISH_ID");
        public final static Property OrderDishName = new Property(6, String.class, "orderDishName", false, "ORDER_DISH_NAME");
        public final static Property DishId = new Property(7, String.class, "dishId", false, "DISH_ID");
        public final static Property DishName = new Property(8, String.class, "dishName", false, "DISH_NAME");
        public final static Property PracticeId = new Property(9, String.class, "practiceId", false, "PRACTICE_ID");
        public final static Property PracticeName = new Property(10, String.class, "practiceName", false, "PRACTICE_NAME");
        public final static Property SpecifyId = new Property(11, String.class, "specifyId", false, "SPECIFY_ID");
        public final static Property SpecifyName = new Property(12, String.class, "specifyName", false, "SPECIFY_NAME");
        public final static Property TaocanGroupDishCount = new Property(13, Integer.class, "taocanGroupDishCount", false, "TAOCAN_GROUP_DISH_COUNT");
        public final static Property ExtraPrice = new Property(14, Float.class, "extraPrice", false, "EXTRA_PRICE");
        public final static Property Remark = new Property(15, String.class, "remark", false, "REMARK");
        public final static Property Status = new Property(16, Integer.class, "status", false, "STATUS");
        public final static Property CreateTime = new Property(17, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property TaocanTypeId = new Property(18, String.class, "taocanTypeId", false, "TAOCAN_TYPE_ID");
        public final static Property DishTypeId = new Property(19, String.class, "dishTypeId", false, "DISH_TYPE_ID");
        public final static Property TaocanTypeName = new Property(20, String.class, "taocanTypeName", false, "TAOCAN_TYPE_NAME");
        public final static Property DishTypeName = new Property(21, String.class, "dishTypeName", false, "DISH_TYPE_NAME");
        public final static Property IsPrint = new Property(22, Integer.class, "isPrint", false, "IS_PRINT");
    };


    public OrderTaocanGroupDishEntityDao(DaoConfig config) {
        super(config);
    }
    
    public OrderTaocanGroupDishEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_TAOCAN_GROUP_DISH_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"ORDER_TAOCAN_GROUP_DISH_ID\" TEXT NOT NULL UNIQUE ," + // 1: orderTaocanGroupDishId
                "\"ORDER_ID\" TEXT," + // 2: orderId
                "\"TAOCAN_GROUP_DISH_ID\" TEXT," + // 3: taocanGroupDishId
                "\"TAOCAN_GROUP_ID\" TEXT," + // 4: taocanGroupId
                "\"ORDER_DISH_ID\" TEXT," + // 5: orderDishId
                "\"ORDER_DISH_NAME\" TEXT," + // 6: orderDishName
                "\"DISH_ID\" TEXT," + // 7: dishId
                "\"DISH_NAME\" TEXT," + // 8: dishName
                "\"PRACTICE_ID\" TEXT," + // 9: practiceId
                "\"PRACTICE_NAME\" TEXT," + // 10: practiceName
                "\"SPECIFY_ID\" TEXT," + // 11: specifyId
                "\"SPECIFY_NAME\" TEXT," + // 12: specifyName
                "\"TAOCAN_GROUP_DISH_COUNT\" INTEGER," + // 13: taocanGroupDishCount
                "\"EXTRA_PRICE\" REAL," + // 14: extraPrice
                "\"REMARK\" TEXT," + // 15: remark
                "\"STATUS\" INTEGER," + // 16: status
                "\"CREATE_TIME\" INTEGER," + // 17: createTime
                "\"TAOCAN_TYPE_ID\" TEXT," + // 18: taocanTypeId
                "\"DISH_TYPE_ID\" TEXT," + // 19: dishTypeId
                "\"TAOCAN_TYPE_NAME\" TEXT," + // 20: taocanTypeName
                "\"DISH_TYPE_NAME\" TEXT," + // 21: dishTypeName
                "\"IS_PRINT\" INTEGER);"); // 22: isPrint
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_TAOCAN_GROUP_DISH_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderTaocanGroupDishEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getOrderTaocanGroupDishId());
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(3, orderId);
        }
 
        String taocanGroupDishId = entity.getTaocanGroupDishId();
        if (taocanGroupDishId != null) {
            stmt.bindString(4, taocanGroupDishId);
        }
 
        String taocanGroupId = entity.getTaocanGroupId();
        if (taocanGroupId != null) {
            stmt.bindString(5, taocanGroupId);
        }
 
        String orderDishId = entity.getOrderDishId();
        if (orderDishId != null) {
            stmt.bindString(6, orderDishId);
        }
 
        String orderDishName = entity.getOrderDishName();
        if (orderDishName != null) {
            stmt.bindString(7, orderDishName);
        }
 
        String dishId = entity.getDishId();
        if (dishId != null) {
            stmt.bindString(8, dishId);
        }
 
        String dishName = entity.getDishName();
        if (dishName != null) {
            stmt.bindString(9, dishName);
        }
 
        String practiceId = entity.getPracticeId();
        if (practiceId != null) {
            stmt.bindString(10, practiceId);
        }
 
        String practiceName = entity.getPracticeName();
        if (practiceName != null) {
            stmt.bindString(11, practiceName);
        }
 
        String specifyId = entity.getSpecifyId();
        if (specifyId != null) {
            stmt.bindString(12, specifyId);
        }
 
        String specifyName = entity.getSpecifyName();
        if (specifyName != null) {
            stmt.bindString(13, specifyName);
        }
 
        Integer taocanGroupDishCount = entity.getTaocanGroupDishCount();
        if (taocanGroupDishCount != null) {
            stmt.bindLong(14, taocanGroupDishCount);
        }
 
        Float extraPrice = entity.getExtraPrice();
        if (extraPrice != null) {
            stmt.bindDouble(15, extraPrice);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(16, remark);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(17, status);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(18, createTime);
        }
 
        String taocanTypeId = entity.getTaocanTypeId();
        if (taocanTypeId != null) {
            stmt.bindString(19, taocanTypeId);
        }
 
        String dishTypeId = entity.getDishTypeId();
        if (dishTypeId != null) {
            stmt.bindString(20, dishTypeId);
        }
 
        String taocanTypeName = entity.getTaocanTypeName();
        if (taocanTypeName != null) {
            stmt.bindString(21, taocanTypeName);
        }
 
        String dishTypeName = entity.getDishTypeName();
        if (dishTypeName != null) {
            stmt.bindString(22, dishTypeName);
        }
 
        Integer isPrint = entity.getIsPrint();
        if (isPrint != null) {
            stmt.bindLong(23, isPrint);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrderTaocanGroupDishEntity readEntity(Cursor cursor, int offset) {
        OrderTaocanGroupDishEntity entity = new OrderTaocanGroupDishEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // orderTaocanGroupDishId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // taocanGroupDishId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // taocanGroupId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // orderDishId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // orderDishName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dishId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // dishName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // practiceId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // practiceName
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // specifyId
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // specifyName
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // taocanGroupDishCount
            cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14), // extraPrice
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // remark
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // status
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // createTime
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // taocanTypeId
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // dishTypeId
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // taocanTypeName
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // dishTypeName
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22) // isPrint
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderTaocanGroupDishEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderTaocanGroupDishId(cursor.getString(offset + 1));
        entity.setOrderId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTaocanGroupDishId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTaocanGroupId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrderDishId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrderDishName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDishId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDishName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPracticeId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setPracticeName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSpecifyId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSpecifyName(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTaocanGroupDishCount(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setExtraPrice(cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14));
        entity.setRemark(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setStatus(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setCreateTime(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setTaocanTypeId(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setDishTypeId(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setTaocanTypeName(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setDishTypeName(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setIsPrint(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OrderTaocanGroupDishEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OrderTaocanGroupDishEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
