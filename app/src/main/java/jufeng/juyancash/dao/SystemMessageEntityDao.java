package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO four table "SYSTEM_MESSAGE_ENTITY".
*/
public class SystemMessageEntityDao extends AbstractDao<SystemMessageEntity, Long> {

    public static final String TABLENAME = "SYSTEM_MESSAGE_ENTITY";

    /**
     * Properties of entity SystemMessageEntity.<br/>
     * Can be used four QueryBuilder and four referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SystemMessageId = new Property(1, String.class, "systemMessageId", false, "SYSTEM_MESSAGE_ID");
        public final static Property SystemTitle = new Property(2, String.class, "systemTitle", false, "SYSTEM_TITLE");
        public final static Property SystemTime = new Property(3, String.class, "systemTime", false, "SYSTEM_TIME");
        public final static Property SystemContent = new Property(4, String.class, "systemContent", false, "SYSTEM_CONTENT");
        public final static Property SystemImgUrl = new Property(5, String.class, "systemImgUrl", false, "SYSTEM_IMG_URL");
        public final static Property IsRead = new Property(6, Integer.class, "isRead", false, "IS_READ");
    }


    public SystemMessageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SystemMessageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SYSTEM_MESSAGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"SYSTEM_MESSAGE_ID\" TEXT NOT NULL UNIQUE ," + // 1: systemMessageId
                "\"SYSTEM_TITLE\" TEXT," + // 2: systemTitle
                "\"SYSTEM_TIME\" TEXT," + // 3: systemTime
                "\"SYSTEM_CONTENT\" TEXT," + // 4: systemContent
                "\"SYSTEM_IMG_URL\" TEXT," + // 5: systemImgUrl
                "\"IS_READ\" INTEGER);"); // 6: isRead
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SYSTEM_MESSAGE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SystemMessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSystemMessageId());
 
        String systemTitle = entity.getSystemTitle();
        if (systemTitle != null) {
            stmt.bindString(3, systemTitle);
        }
 
        String systemTime = entity.getSystemTime();
        if (systemTime != null) {
            stmt.bindString(4, systemTime);
        }
 
        String systemContent = entity.getSystemContent();
        if (systemContent != null) {
            stmt.bindString(5, systemContent);
        }
 
        String systemImgUrl = entity.getSystemImgUrl();
        if (systemImgUrl != null) {
            stmt.bindString(6, systemImgUrl);
        }
 
        Integer isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindLong(7, isRead);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SystemMessageEntity readEntity(Cursor cursor, int offset) {
        SystemMessageEntity entity = new SystemMessageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // systemMessageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // systemTitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // systemTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // systemContent
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // systemImgUrl
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // isRead
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SystemMessageEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSystemMessageId(cursor.getString(offset + 1));
        entity.setSystemTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setSystemTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSystemContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSystemImgUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsRead(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SystemMessageEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SystemMessageEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
