package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO four table "DISCOUNT_ENTITY".
*/
public class DiscountEntityDao extends AbstractDao<DiscountEntity, Long> {

    public static final String TABLENAME = "DISCOUNT_ENTITY";

    /**
     * Properties of entity DiscountEntity.<br/>
     * Can be used four QueryBuilder and four referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DiscountId = new Property(1, String.class, "discountId", false, "DISCOUNT_ID");
        public final static Property DiscountName = new Property(2, String.class, "discountName", false, "DISCOUNT_NAME");
        public final static Property DiscountType = new Property(3, Integer.class, "discountType", false, "DISCOUNT_TYPE");
        public final static Property DiscountPercentage = new Property(4, Integer.class, "discountPercentage", false, "DISCOUNT_PERCENTAGE");
        public final static Property IsEnforcement = new Property(5, Integer.class, "isEnforcement", false, "IS_ENFORCEMENT");
        public final static Property IsDishSameDiscount = new Property(6, Integer.class, "isDishSameDiscount", false, "IS_DISH_SAME_DISCOUNT");
        public final static Property IsEmployeeSameDiscount = new Property(7, Integer.class, "isEmployeeSameDiscount", false, "IS_EMPLOYEE_SAME_DISCOUNT");
        public final static Property IsDateAlidity = new Property(8, Integer.class, "isDateAlidity", false, "IS_DATE_ALIDITY");
        public final static Property DateBegin = new Property(9, String.class, "dateBegin", false, "DATE_BEGIN");
        public final static Property DateEnd = new Property(10, String.class, "dateEnd", false, "DATE_END");
        public final static Property IsTimeAlidity = new Property(11, Integer.class, "isTimeAlidity", false, "IS_TIME_ALIDITY");
        public final static Property TimeStart = new Property(12, String.class, "timeStart", false, "TIME_START");
        public final static Property TimeEnd = new Property(13, String.class, "timeEnd", false, "TIME_END");
        public final static Property IsWeekAlidity = new Property(14, Integer.class, "isWeekAlidity", false, "IS_WEEK_ALIDITY");
        public final static Property Weekdate = new Property(15, String.class, "weekdate", false, "WEEKDATE");
    }


    public DiscountEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DiscountEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISCOUNT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"DISCOUNT_ID\" TEXT NOT NULL UNIQUE ," + // 1: discountId
                "\"DISCOUNT_NAME\" TEXT," + // 2: discountName
                "\"DISCOUNT_TYPE\" INTEGER," + // 3: discountType
                "\"DISCOUNT_PERCENTAGE\" INTEGER," + // 4: discountPercentage
                "\"IS_ENFORCEMENT\" INTEGER," + // 5: isEnforcement
                "\"IS_DISH_SAME_DISCOUNT\" INTEGER," + // 6: isDishSameDiscount
                "\"IS_EMPLOYEE_SAME_DISCOUNT\" INTEGER," + // 7: isEmployeeSameDiscount
                "\"IS_DATE_ALIDITY\" INTEGER," + // 8: isDateAlidity
                "\"DATE_BEGIN\" TEXT," + // 9: dateBegin
                "\"DATE_END\" TEXT," + // 10: dateEnd
                "\"IS_TIME_ALIDITY\" INTEGER," + // 11: isTimeAlidity
                "\"TIME_START\" TEXT," + // 12: timeStart
                "\"TIME_END\" TEXT," + // 13: timeEnd
                "\"IS_WEEK_ALIDITY\" INTEGER," + // 14: isWeekAlidity
                "\"WEEKDATE\" TEXT);"); // 15: weekdate
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISCOUNT_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DiscountEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDiscountId());
 
        String discountName = entity.getDiscountName();
        if (discountName != null) {
            stmt.bindString(3, discountName);
        }
 
        Integer discountType = entity.getDiscountType();
        if (discountType != null) {
            stmt.bindLong(4, discountType);
        }
 
        Integer discountPercentage = entity.getDiscountPercentage();
        if (discountPercentage != null) {
            stmt.bindLong(5, discountPercentage);
        }
 
        Integer isEnforcement = entity.getIsEnforcement();
        if (isEnforcement != null) {
            stmt.bindLong(6, isEnforcement);
        }
 
        Integer isDishSameDiscount = entity.getIsDishSameDiscount();
        if (isDishSameDiscount != null) {
            stmt.bindLong(7, isDishSameDiscount);
        }
 
        Integer isEmployeeSameDiscount = entity.getIsEmployeeSameDiscount();
        if (isEmployeeSameDiscount != null) {
            stmt.bindLong(8, isEmployeeSameDiscount);
        }
 
        Integer isDateAlidity = entity.getIsDateAlidity();
        if (isDateAlidity != null) {
            stmt.bindLong(9, isDateAlidity);
        }
 
        String dateBegin = entity.getDateBegin();
        if (dateBegin != null) {
            stmt.bindString(10, dateBegin);
        }
 
        String dateEnd = entity.getDateEnd();
        if (dateEnd != null) {
            stmt.bindString(11, dateEnd);
        }
 
        Integer isTimeAlidity = entity.getIsTimeAlidity();
        if (isTimeAlidity != null) {
            stmt.bindLong(12, isTimeAlidity);
        }
 
        String timeStart = entity.getTimeStart();
        if (timeStart != null) {
            stmt.bindString(13, timeStart);
        }
 
        String timeEnd = entity.getTimeEnd();
        if (timeEnd != null) {
            stmt.bindString(14, timeEnd);
        }
 
        Integer isWeekAlidity = entity.getIsWeekAlidity();
        if (isWeekAlidity != null) {
            stmt.bindLong(15, isWeekAlidity);
        }
 
        String weekdate = entity.getWeekdate();
        if (weekdate != null) {
            stmt.bindString(16, weekdate);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DiscountEntity readEntity(Cursor cursor, int offset) {
        DiscountEntity entity = new DiscountEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // discountId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // discountName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // discountType
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // discountPercentage
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // isEnforcement
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // isDishSameDiscount
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // isEmployeeSameDiscount
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // isDateAlidity
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // dateBegin
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // dateEnd
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // isTimeAlidity
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // timeStart
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // timeEnd
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // isWeekAlidity
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // weekdate
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DiscountEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDiscountId(cursor.getString(offset + 1));
        entity.setDiscountName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDiscountType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDiscountPercentage(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setIsEnforcement(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setIsDishSameDiscount(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setIsEmployeeSameDiscount(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsDateAlidity(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDateBegin(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDateEnd(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsTimeAlidity(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setTimeStart(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTimeEnd(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsWeekAlidity(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setWeekdate(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DiscountEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DiscountEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
