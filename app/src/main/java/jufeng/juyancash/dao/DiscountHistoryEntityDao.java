package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DISCOUNT_HISTORY_ENTITY".
*/
public class DiscountHistoryEntityDao extends AbstractDao<DiscountHistoryEntity, Long> {

    public static final String TABLENAME = "DISCOUNT_HISTORY_ENTITY";

    /**
     * Properties of entity DiscountHistoryEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DiscountHistoryId = new Property(1, String.class, "discountHistoryId", false, "DISCOUNT_HISTORY_ID");
        public final static Property OrderId = new Property(2, String.class, "orderId", false, "ORDER_ID");
        public final static Property DiscountType = new Property(3, Integer.class, "discountType", false, "DISCOUNT_TYPE");
        public final static Property DiscountRate = new Property(4, Integer.class, "discountRate", false, "DISCOUNT_RATE");
        public final static Property DiscountReason = new Property(5, String.class, "discountReason", false, "DISCOUNT_REASON");
        public final static Property DiscountId = new Property(6, String.class, "discountId", false, "DISCOUNT_ID");
        public final static Property CreateTime = new Property(7, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property IsAbleDiscount = new Property(8, Integer.class, "isAbleDiscount", false, "IS_ABLE_DISCOUNT");
    }


    public DiscountHistoryEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DiscountHistoryEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISCOUNT_HISTORY_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"DISCOUNT_HISTORY_ID\" TEXT NOT NULL UNIQUE ," + // 1: discountHistoryId
                "\"ORDER_ID\" TEXT," + // 2: orderId
                "\"DISCOUNT_TYPE\" INTEGER," + // 3: discountType
                "\"DISCOUNT_RATE\" INTEGER," + // 4: discountRate
                "\"DISCOUNT_REASON\" TEXT," + // 5: discountReason
                "\"DISCOUNT_ID\" TEXT," + // 6: discountId
                "\"CREATE_TIME\" INTEGER," + // 7: createTime
                "\"IS_ABLE_DISCOUNT\" INTEGER);"); // 8: isAbleDiscount
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISCOUNT_HISTORY_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DiscountHistoryEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDiscountHistoryId());
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(3, orderId);
        }
 
        Integer discountType = entity.getDiscountType();
        if (discountType != null) {
            stmt.bindLong(4, discountType);
        }
 
        Integer discountRate = entity.getDiscountRate();
        if (discountRate != null) {
            stmt.bindLong(5, discountRate);
        }
 
        String discountReason = entity.getDiscountReason();
        if (discountReason != null) {
            stmt.bindString(6, discountReason);
        }
 
        String discountId = entity.getDiscountId();
        if (discountId != null) {
            stmt.bindString(7, discountId);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(8, createTime);
        }
 
        Integer isAbleDiscount = entity.getIsAbleDiscount();
        if (isAbleDiscount != null) {
            stmt.bindLong(9, isAbleDiscount);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DiscountHistoryEntity readEntity(Cursor cursor, int offset) {
        DiscountHistoryEntity entity = new DiscountHistoryEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // discountHistoryId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // discountType
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // discountRate
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // discountReason
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // discountId
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // createTime
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // isAbleDiscount
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DiscountHistoryEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDiscountHistoryId(cursor.getString(offset + 1));
        entity.setOrderId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDiscountType(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDiscountRate(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setDiscountReason(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDiscountId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCreateTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setIsAbleDiscount(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DiscountHistoryEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DiscountHistoryEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
