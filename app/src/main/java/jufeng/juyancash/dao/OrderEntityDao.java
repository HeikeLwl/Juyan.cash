package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "ORDER_ENTITY".
*/
public class OrderEntityDao extends AbstractDao<OrderEntity, Long> {

    public static final String TABLENAME = "ORDER_ENTITY";

    /**
     * Properties of entity OrderEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderId = new Property(1, String.class, "orderId", false, "ORDER_ID");
        public final static Property SerialNumber = new Property(2, String.class, "serialNumber", false, "SERIAL_NUMBER");
        public final static Property OrderGuests = new Property(3, Integer.class, "orderGuests", false, "ORDER_GUESTS");
        public final static Property IsLimited = new Property(4, Integer.class, "isLimited", false, "IS_LIMITED");
        public final static Property LimitedTime = new Property(5, Integer.class, "limitedTime", false, "LIMITED_TIME");
        public final static Property RemindTime = new Property(6, Integer.class, "remindTime", false, "REMIND_TIME");
        public final static Property OpenTime = new Property(7, Long.class, "openTime", false, "OPEN_TIME");
        public final static Property CloseTime = new Property(8, Long.class, "closeTime", false, "CLOSE_TIME");
        public final static Property CloseMoney = new Property(9, Integer.class, "closeMoney", false, "CLOSE_MONEY");
        public final static Property TableId = new Property(10, String.class, "tableId", false, "TABLE_ID");
        public final static Property AreaId = new Property(11, String.class, "areaId", false, "AREA_ID");
        public final static Property OrderStatus = new Property(12, Integer.class, "orderStatus", false, "ORDER_STATUS");
        public final static Property OrderNumber = new Property(13, Integer.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property CashierId = new Property(14, String.class, "cashierId", false, "CASHIER_ID");
        public final static Property WaiterId = new Property(15, String.class, "waiterId", false, "WAITER_ID");
        public final static Property TreatmentMoney = new Property(16, Integer.class, "treatmentMoney", false, "TREATMENT_MONEY");
        public final static Property SelfTreatMoney = new Property(17, Integer.class, "selfTreatMoney", false, "SELF_TREAT_MONEY");
        public final static Property MantissaMoney = new Property(18, Integer.class, "mantissaMoney", false, "MANTISSA_MONEY");
        public final static Property PresentMoney = new Property(19, Integer.class, "presentMoney", false, "PRESENT_MONEY");
        public final static Property TotalMoney = new Property(20, Integer.class, "totalMoney", false, "TOTAL_MONEY");
        public final static Property InvoiceMoney = new Property(21, Integer.class, "invoiceMoney", false, "INVOICE_MONEY");
        public final static Property VipDiscountMoney = new Property(22, Integer.class, "vipDiscountMoney", false, "VIP_DISCOUNT_MONEY");
        public final static Property CouponDiscountMoney = new Property(23, Integer.class, "couponDiscountMoney", false, "COUPON_DISCOUNT_MONEY");
        public final static Property DiscountMoney = new Property(24, Integer.class, "discountMoney", false, "DISCOUNT_MONEY");
        public final static Property DiscountTotalMoney = new Property(25, Integer.class, "discountTotalMoney", false, "DISCOUNT_TOTAL_MONEY");
        public final static Property IsReturnOrder = new Property(26, Integer.class, "isReturnOrder", false, "IS_RETURN_ORDER");
        public final static Property ReturnOrderReason = new Property(27, String.class, "returnOrderReason", false, "RETURN_ORDER_REASON");
        public final static Property IsShift = new Property(28, Integer.class, "isShift", false, "IS_SHIFT");
        public final static Property OrderType = new Property(29, Integer.class, "orderType", false, "ORDER_TYPE");
        public final static Property IsUpload = new Property(30, Integer.class, "isUpload", false, "IS_UPLOAD");
        public final static Property IsJoinedTable = new Property(31, Integer.class, "isJoinedTable", false, "IS_JOINED_TABLE");
        public final static Property IsJoinedOrder = new Property(32, Integer.class, "isJoinedOrder", false, "IS_JOINED_ORDER");
        public final static Property JoinedTableId = new Property(33, String.class, "joinedTableId", false, "JOINED_TABLE_ID");
        public final static Property JoinedOrderId = new Property(34, String.class, "joinedOrderId", false, "JOINED_ORDER_ID");
        public final static Property IsVip = new Property(35, Integer.class, "isVip", false, "IS_VIP");
        public final static Property VipNo = new Property(36, String.class, "vipNo", false, "VIP_NO");
        public final static Property VipType = new Property(37, Integer.class, "vipType", false, "VIP_TYPE");
        public final static Property VipBalance = new Property(38, Integer.class, "vipBalance", false, "VIP_BALANCE");
        public final static Property IsCoupon = new Property(39, Integer.class, "isCoupon", false, "IS_COUPON");
        public final static Property UserCouponId = new Property(40, String.class, "userCouponId", false, "USER_COUPON_ID");
        public final static Property CouponId = new Property(41, String.class, "couponId", false, "COUPON_ID");
        public final static Property CouponType = new Property(42, Integer.class, "couponType", false, "COUPON_TYPE");
        public final static Property CouponFaceValue = new Property(43, Integer.class, "couponFaceValue", false, "COUPON_FACE_VALUE");
        public final static Property CouponCondition = new Property(44, Integer.class, "couponCondition", false, "COUPON_CONDITION");
        public final static Property IsCouponWithVip = new Property(45, Integer.class, "isCouponWithVip", false, "IS_COUPON_WITH_VIP");
        public final static Property IsCouponDiscountAll = new Property(46, Integer.class, "isCouponDiscountAll", false, "IS_COUPON_DISCOUNT_ALL");
        public final static Property CouponVipno = new Property(47, String.class, "couponVipno", false, "COUPON_VIPNO");
        public final static Property IsSync = new Property(48, Integer.class, "isSync", false, "IS_SYNC");
        public final static Property StoreVersion = new Property(49, Integer.class, "storeVersion", false, "STORE_VERSION");
        public final static Property DispacherType = new Property(50, Integer.class, "dispacherType", false, "DISPACHER_TYPE");
        public final static Property DispacherName = new Property(51, String.class, "dispacherName", false, "DISPACHER_NAME");
        public final static Property DispacherTel = new Property(52, String.class, "dispacherTel", false, "DISPACHER_TEL");
        public final static Property DispacherId = new Property(53, String.class, "dispacherId", false, "DISPACHER_ID");
        public final static Property DispacherTc = new Property(54, Integer.class, "dispacherTc", false, "DISPACHER_TC");
        public final static Property DispacherExtralMoney = new Property(55, Integer.class, "dispacherExtralMoney", false, "DISPACHER_EXTRAL_MONEY");
    };


    public OrderEntityDao(DaoConfig config) {
        super(config);
    }
    
    public OrderEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"ORDER_ID\" TEXT NOT NULL UNIQUE ," + // 1: orderId
                "\"SERIAL_NUMBER\" TEXT," + // 2: serialNumber
                "\"ORDER_GUESTS\" INTEGER," + // 3: orderGuests
                "\"IS_LIMITED\" INTEGER," + // 4: isLimited
                "\"LIMITED_TIME\" INTEGER," + // 5: limitedTime
                "\"REMIND_TIME\" INTEGER," + // 6: remindTime
                "\"OPEN_TIME\" INTEGER," + // 7: openTime
                "\"CLOSE_TIME\" INTEGER," + // 8: closeTime
                "\"CLOSE_MONEY\" INTEGER," + // 9: closeMoney
                "\"TABLE_ID\" TEXT," + // 10: tableId
                "\"AREA_ID\" TEXT," + // 11: areaId
                "\"ORDER_STATUS\" INTEGER," + // 12: orderStatus
                "\"ORDER_NUMBER\" INTEGER," + // 13: orderNumber
                "\"CASHIER_ID\" TEXT," + // 14: cashierId
                "\"WAITER_ID\" TEXT," + // 15: waiterId
                "\"TREATMENT_MONEY\" INTEGER," + // 16: treatmentMoney
                "\"SELF_TREAT_MONEY\" INTEGER," + // 17: selfTreatMoney
                "\"MANTISSA_MONEY\" INTEGER," + // 18: mantissaMoney
                "\"PRESENT_MONEY\" INTEGER," + // 19: presentMoney
                "\"TOTAL_MONEY\" INTEGER," + // 20: totalMoney
                "\"INVOICE_MONEY\" INTEGER," + // 21: invoiceMoney
                "\"VIP_DISCOUNT_MONEY\" INTEGER," + // 22: vipDiscountMoney
                "\"COUPON_DISCOUNT_MONEY\" INTEGER," + // 23: couponDiscountMoney
                "\"DISCOUNT_MONEY\" INTEGER," + // 24: discountMoney
                "\"DISCOUNT_TOTAL_MONEY\" INTEGER," + // 25: discountTotalMoney
                "\"IS_RETURN_ORDER\" INTEGER," + // 26: isReturnOrder
                "\"RETURN_ORDER_REASON\" TEXT," + // 27: returnOrderReason
                "\"IS_SHIFT\" INTEGER," + // 28: isShift
                "\"ORDER_TYPE\" INTEGER," + // 29: orderType
                "\"IS_UPLOAD\" INTEGER," + // 30: isUpload
                "\"IS_JOINED_TABLE\" INTEGER," + // 31: isJoinedTable
                "\"IS_JOINED_ORDER\" INTEGER," + // 32: isJoinedOrder
                "\"JOINED_TABLE_ID\" TEXT," + // 33: joinedTableId
                "\"JOINED_ORDER_ID\" TEXT," + // 34: joinedOrderId
                "\"IS_VIP\" INTEGER," + // 35: isVip
                "\"VIP_NO\" TEXT," + // 36: vipNo
                "\"VIP_TYPE\" INTEGER," + // 37: vipType
                "\"VIP_BALANCE\" INTEGER," + // 38: vipBalance
                "\"IS_COUPON\" INTEGER," + // 39: isCoupon
                "\"USER_COUPON_ID\" TEXT," + // 40: userCouponId
                "\"COUPON_ID\" TEXT," + // 41: couponId
                "\"COUPON_TYPE\" INTEGER," + // 42: couponType
                "\"COUPON_FACE_VALUE\" INTEGER," + // 43: couponFaceValue
                "\"COUPON_CONDITION\" INTEGER," + // 44: couponCondition
                "\"IS_COUPON_WITH_VIP\" INTEGER," + // 45: isCouponWithVip
                "\"IS_COUPON_DISCOUNT_ALL\" INTEGER," + // 46: isCouponDiscountAll
                "\"COUPON_VIPNO\" TEXT," + // 47: couponVipno
                "\"IS_SYNC\" INTEGER," + // 48: isSync
                "\"STORE_VERSION\" INTEGER," + // 49: storeVersion
                "\"DISPACHER_TYPE\" INTEGER," + // 50: dispacherType
                "\"DISPACHER_NAME\" TEXT," + // 51: dispacherName
                "\"DISPACHER_TEL\" TEXT," + // 52: dispacherTel
                "\"DISPACHER_ID\" TEXT," + // 53: dispacherId
                "\"DISPACHER_TC\" INTEGER," + // 54: dispacherTc
                "\"DISPACHER_EXTRAL_MONEY\" INTEGER);"); // 55: dispacherExtralMoney
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getOrderId());
 
        String serialNumber = entity.getSerialNumber();
        if (serialNumber != null) {
            stmt.bindString(3, serialNumber);
        }
 
        Integer orderGuests = entity.getOrderGuests();
        if (orderGuests != null) {
            stmt.bindLong(4, orderGuests);
        }
 
        Integer isLimited = entity.getIsLimited();
        if (isLimited != null) {
            stmt.bindLong(5, isLimited);
        }
 
        Integer limitedTime = entity.getLimitedTime();
        if (limitedTime != null) {
            stmt.bindLong(6, limitedTime);
        }
 
        Integer remindTime = entity.getRemindTime();
        if (remindTime != null) {
            stmt.bindLong(7, remindTime);
        }
 
        Long openTime = entity.getOpenTime();
        if (openTime != null) {
            stmt.bindLong(8, openTime);
        }
 
        Long closeTime = entity.getCloseTime();
        if (closeTime != null) {
            stmt.bindLong(9, closeTime);
        }
 
        Integer closeMoney = entity.getCloseMoney();
        if (closeMoney != null) {
            stmt.bindLong(10, closeMoney);
        }
 
        String tableId = entity.getTableId();
        if (tableId != null) {
            stmt.bindString(11, tableId);
        }
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(12, areaId);
        }
 
        Integer orderStatus = entity.getOrderStatus();
        if (orderStatus != null) {
            stmt.bindLong(13, orderStatus);
        }
 
        Integer orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindLong(14, orderNumber);
        }
 
        String cashierId = entity.getCashierId();
        if (cashierId != null) {
            stmt.bindString(15, cashierId);
        }
 
        String waiterId = entity.getWaiterId();
        if (waiterId != null) {
            stmt.bindString(16, waiterId);
        }
 
        Integer treatmentMoney = entity.getTreatmentMoney();
        if (treatmentMoney != null) {
            stmt.bindLong(17, treatmentMoney);
        }
 
        Integer selfTreatMoney = entity.getSelfTreatMoney();
        if (selfTreatMoney != null) {
            stmt.bindLong(18, selfTreatMoney);
        }
 
        Integer mantissaMoney = entity.getMantissaMoney();
        if (mantissaMoney != null) {
            stmt.bindLong(19, mantissaMoney);
        }
 
        Integer presentMoney = entity.getPresentMoney();
        if (presentMoney != null) {
            stmt.bindLong(20, presentMoney);
        }
 
        Integer totalMoney = entity.getTotalMoney();
        if (totalMoney != null) {
            stmt.bindLong(21, totalMoney);
        }
 
        Integer invoiceMoney = entity.getInvoiceMoney();
        if (invoiceMoney != null) {
            stmt.bindLong(22, invoiceMoney);
        }
 
        Integer vipDiscountMoney = entity.getVipDiscountMoney();
        if (vipDiscountMoney != null) {
            stmt.bindLong(23, vipDiscountMoney);
        }
 
        Integer couponDiscountMoney = entity.getCouponDiscountMoney();
        if (couponDiscountMoney != null) {
            stmt.bindLong(24, couponDiscountMoney);
        }
 
        Integer discountMoney = entity.getDiscountMoney();
        if (discountMoney != null) {
            stmt.bindLong(25, discountMoney);
        }
 
        Integer discountTotalMoney = entity.getDiscountTotalMoney();
        if (discountTotalMoney != null) {
            stmt.bindLong(26, discountTotalMoney);
        }
 
        Integer isReturnOrder = entity.getIsReturnOrder();
        if (isReturnOrder != null) {
            stmt.bindLong(27, isReturnOrder);
        }
 
        String returnOrderReason = entity.getReturnOrderReason();
        if (returnOrderReason != null) {
            stmt.bindString(28, returnOrderReason);
        }
 
        Integer isShift = entity.getIsShift();
        if (isShift != null) {
            stmt.bindLong(29, isShift);
        }
 
        Integer orderType = entity.getOrderType();
        if (orderType != null) {
            stmt.bindLong(30, orderType);
        }
 
        Integer isUpload = entity.getIsUpload();
        if (isUpload != null) {
            stmt.bindLong(31, isUpload);
        }
 
        Integer isJoinedTable = entity.getIsJoinedTable();
        if (isJoinedTable != null) {
            stmt.bindLong(32, isJoinedTable);
        }
 
        Integer isJoinedOrder = entity.getIsJoinedOrder();
        if (isJoinedOrder != null) {
            stmt.bindLong(33, isJoinedOrder);
        }
 
        String joinedTableId = entity.getJoinedTableId();
        if (joinedTableId != null) {
            stmt.bindString(34, joinedTableId);
        }
 
        String joinedOrderId = entity.getJoinedOrderId();
        if (joinedOrderId != null) {
            stmt.bindString(35, joinedOrderId);
        }
 
        Integer isVip = entity.getIsVip();
        if (isVip != null) {
            stmt.bindLong(36, isVip);
        }
 
        String vipNo = entity.getVipNo();
        if (vipNo != null) {
            stmt.bindString(37, vipNo);
        }
 
        Integer vipType = entity.getVipType();
        if (vipType != null) {
            stmt.bindLong(38, vipType);
        }
 
        Integer vipBalance = entity.getVipBalance();
        if (vipBalance != null) {
            stmt.bindLong(39, vipBalance);
        }
 
        Integer isCoupon = entity.getIsCoupon();
        if (isCoupon != null) {
            stmt.bindLong(40, isCoupon);
        }
 
        String userCouponId = entity.getUserCouponId();
        if (userCouponId != null) {
            stmt.bindString(41, userCouponId);
        }
 
        String couponId = entity.getCouponId();
        if (couponId != null) {
            stmt.bindString(42, couponId);
        }
 
        Integer couponType = entity.getCouponType();
        if (couponType != null) {
            stmt.bindLong(43, couponType);
        }
 
        Integer couponFaceValue = entity.getCouponFaceValue();
        if (couponFaceValue != null) {
            stmt.bindLong(44, couponFaceValue);
        }
 
        Integer couponCondition = entity.getCouponCondition();
        if (couponCondition != null) {
            stmt.bindLong(45, couponCondition);
        }
 
        Integer isCouponWithVip = entity.getIsCouponWithVip();
        if (isCouponWithVip != null) {
            stmt.bindLong(46, isCouponWithVip);
        }
 
        Integer isCouponDiscountAll = entity.getIsCouponDiscountAll();
        if (isCouponDiscountAll != null) {
            stmt.bindLong(47, isCouponDiscountAll);
        }
 
        String couponVipno = entity.getCouponVipno();
        if (couponVipno != null) {
            stmt.bindString(48, couponVipno);
        }
 
        Integer isSync = entity.getIsSync();
        if (isSync != null) {
            stmt.bindLong(49, isSync);
        }
 
        Integer storeVersion = entity.getStoreVersion();
        if (storeVersion != null) {
            stmt.bindLong(50, storeVersion);
        }
 
        Integer dispacherType = entity.getDispacherType();
        if (dispacherType != null) {
            stmt.bindLong(51, dispacherType);
        }
 
        String dispacherName = entity.getDispacherName();
        if (dispacherName != null) {
            stmt.bindString(52, dispacherName);
        }
 
        String dispacherTel = entity.getDispacherTel();
        if (dispacherTel != null) {
            stmt.bindString(53, dispacherTel);
        }
 
        String dispacherId = entity.getDispacherId();
        if (dispacherId != null) {
            stmt.bindString(54, dispacherId);
        }
 
        Integer dispacherTc = entity.getDispacherTc();
        if (dispacherTc != null) {
            stmt.bindLong(55, dispacherTc);
        }
 
        Integer dispacherExtralMoney = entity.getDispacherExtralMoney();
        if (dispacherExtralMoney != null) {
            stmt.bindLong(56, dispacherExtralMoney);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrderEntity readEntity(Cursor cursor, int offset) {
        OrderEntity entity = new OrderEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // orderId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // serialNumber
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // orderGuests
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // isLimited
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // limitedTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // remindTime
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // openTime
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // closeTime
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // closeMoney
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // tableId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // areaId
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // orderStatus
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // orderNumber
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // cashierId
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // waiterId
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // treatmentMoney
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // selfTreatMoney
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // mantissaMoney
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // presentMoney
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // totalMoney
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // invoiceMoney
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // vipDiscountMoney
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // couponDiscountMoney
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // discountMoney
            cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25), // discountTotalMoney
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // isReturnOrder
            cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27), // returnOrderReason
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28), // isShift
            cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29), // orderType
            cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30), // isUpload
            cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31), // isJoinedTable
            cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32), // isJoinedOrder
            cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33), // joinedTableId
            cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34), // joinedOrderId
            cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35), // isVip
            cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36), // vipNo
            cursor.isNull(offset + 37) ? null : cursor.getInt(offset + 37), // vipType
            cursor.isNull(offset + 38) ? null : cursor.getInt(offset + 38), // vipBalance
            cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39), // isCoupon
            cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40), // userCouponId
            cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41), // couponId
            cursor.isNull(offset + 42) ? null : cursor.getInt(offset + 42), // couponType
            cursor.isNull(offset + 43) ? null : cursor.getInt(offset + 43), // couponFaceValue
            cursor.isNull(offset + 44) ? null : cursor.getInt(offset + 44), // couponCondition
            cursor.isNull(offset + 45) ? null : cursor.getInt(offset + 45), // isCouponWithVip
            cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46), // isCouponDiscountAll
            cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47), // couponVipno
            cursor.isNull(offset + 48) ? null : cursor.getInt(offset + 48), // isSync
            cursor.isNull(offset + 49) ? null : cursor.getInt(offset + 49), // storeVersion
            cursor.isNull(offset + 50) ? null : cursor.getInt(offset + 50), // dispacherType
            cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51), // dispacherName
            cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52), // dispacherTel
            cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53), // dispacherId
            cursor.isNull(offset + 54) ? null : cursor.getInt(offset + 54), // dispacherTc
            cursor.isNull(offset + 55) ? null : cursor.getInt(offset + 55) // dispacherExtralMoney
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderId(cursor.getString(offset + 1));
        entity.setSerialNumber(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrderGuests(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setIsLimited(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setLimitedTime(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setRemindTime(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setOpenTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setCloseTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setCloseMoney(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setTableId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setAreaId(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setOrderStatus(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setOrderNumber(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setCashierId(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setWaiterId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setTreatmentMoney(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setSelfTreatMoney(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setMantissaMoney(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setPresentMoney(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setTotalMoney(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setInvoiceMoney(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setVipDiscountMoney(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setCouponDiscountMoney(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setDiscountMoney(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setDiscountTotalMoney(cursor.isNull(offset + 25) ? null : cursor.getInt(offset + 25));
        entity.setIsReturnOrder(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setReturnOrderReason(cursor.isNull(offset + 27) ? null : cursor.getString(offset + 27));
        entity.setIsShift(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
        entity.setOrderType(cursor.isNull(offset + 29) ? null : cursor.getInt(offset + 29));
        entity.setIsUpload(cursor.isNull(offset + 30) ? null : cursor.getInt(offset + 30));
        entity.setIsJoinedTable(cursor.isNull(offset + 31) ? null : cursor.getInt(offset + 31));
        entity.setIsJoinedOrder(cursor.isNull(offset + 32) ? null : cursor.getInt(offset + 32));
        entity.setJoinedTableId(cursor.isNull(offset + 33) ? null : cursor.getString(offset + 33));
        entity.setJoinedOrderId(cursor.isNull(offset + 34) ? null : cursor.getString(offset + 34));
        entity.setIsVip(cursor.isNull(offset + 35) ? null : cursor.getInt(offset + 35));
        entity.setVipNo(cursor.isNull(offset + 36) ? null : cursor.getString(offset + 36));
        entity.setVipType(cursor.isNull(offset + 37) ? null : cursor.getInt(offset + 37));
        entity.setVipBalance(cursor.isNull(offset + 38) ? null : cursor.getInt(offset + 38));
        entity.setIsCoupon(cursor.isNull(offset + 39) ? null : cursor.getInt(offset + 39));
        entity.setUserCouponId(cursor.isNull(offset + 40) ? null : cursor.getString(offset + 40));
        entity.setCouponId(cursor.isNull(offset + 41) ? null : cursor.getString(offset + 41));
        entity.setCouponType(cursor.isNull(offset + 42) ? null : cursor.getInt(offset + 42));
        entity.setCouponFaceValue(cursor.isNull(offset + 43) ? null : cursor.getInt(offset + 43));
        entity.setCouponCondition(cursor.isNull(offset + 44) ? null : cursor.getInt(offset + 44));
        entity.setIsCouponWithVip(cursor.isNull(offset + 45) ? null : cursor.getInt(offset + 45));
        entity.setIsCouponDiscountAll(cursor.isNull(offset + 46) ? null : cursor.getInt(offset + 46));
        entity.setCouponVipno(cursor.isNull(offset + 47) ? null : cursor.getString(offset + 47));
        entity.setIsSync(cursor.isNull(offset + 48) ? null : cursor.getInt(offset + 48));
        entity.setStoreVersion(cursor.isNull(offset + 49) ? null : cursor.getInt(offset + 49));
        entity.setDispacherType(cursor.isNull(offset + 50) ? null : cursor.getInt(offset + 50));
        entity.setDispacherName(cursor.isNull(offset + 51) ? null : cursor.getString(offset + 51));
        entity.setDispacherTel(cursor.isNull(offset + 52) ? null : cursor.getString(offset + 52));
        entity.setDispacherId(cursor.isNull(offset + 53) ? null : cursor.getString(offset + 53));
        entity.setDispacherTc(cursor.isNull(offset + 54) ? null : cursor.getInt(offset + 54));
        entity.setDispacherExtralMoney(cursor.isNull(offset + 55) ? null : cursor.getInt(offset + 55));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OrderEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OrderEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
