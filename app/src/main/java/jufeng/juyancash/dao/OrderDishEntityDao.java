package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "ORDER_DISH_ENTITY".
*/
public class OrderDishEntityDao extends AbstractDao<OrderDishEntity, Long> {

    public static final String TABLENAME = "ORDER_DISH_ENTITY";

    /**
     * Properties of entity OrderDishEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property OrderDishId = new Property(1, String.class, "orderDishId", false, "ORDER_DISH_ID");
        public final static Property OrderId = new Property(2, String.class, "orderId", false, "ORDER_ID");
        public final static Property DishId = new Property(3, String.class, "dishId", false, "DISH_ID");
        public final static Property DishName = new Property(4, String.class, "dishName", false, "DISH_NAME");
        public final static Property DishCount = new Property(5, Double.class, "dishCount", false, "DISH_COUNT");
        public final static Property SpecifyId = new Property(6, String.class, "specifyId", false, "SPECIFY_ID");
        public final static Property DishSpecify = new Property(7, String.class, "dishSpecify", false, "DISH_SPECIFY");
        public final static Property PracticeId = new Property(8, String.class, "practiceId", false, "PRACTICE_ID");
        public final static Property DishPractice = new Property(9, String.class, "dishPractice", false, "DISH_PRACTICE");
        public final static Property DishNote = new Property(10, String.class, "dishNote", false, "DISH_NOTE");
        public final static Property IsOrdered = new Property(11, Integer.class, "isOrdered", false, "IS_ORDERED");
        public final static Property OrderedTime = new Property(12, Long.class, "orderedTime", false, "ORDERED_TIME");
        public final static Property DishPrice = new Property(13, Float.class, "dishPrice", false, "DISH_PRICE");
        public final static Property Type = new Property(14, Integer.class, "type", false, "TYPE");
        public final static Property IsAbleDiscount = new Property(15, Integer.class, "isAbleDiscount", false, "IS_ABLE_DISCOUNT");
        public final static Property DishTypeId = new Property(16, String.class, "dishTypeId", false, "DISH_TYPE_ID");
        public final static Property DishTypeName = new Property(17, String.class, "dishTypeName", false, "DISH_TYPE_NAME");
        public final static Property IsFromWX = new Property(18, Integer.class, "isFromWX", false, "IS_FROM_WX");
        public final static Property IsPresent = new Property(19, Integer.class, "isPresent", false, "IS_PRESENT");
        public final static Property IsRetreat = new Property(20, Integer.class, "isRetreat", false, "IS_RETREAT");
        public final static Property IsPrint = new Property(21, Integer.class, "isPrint", false, "IS_PRINT");
    };


    public OrderDishEntityDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDishEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_DISH_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"ORDER_DISH_ID\" TEXT NOT NULL UNIQUE ," + // 1: orderDishId
                "\"ORDER_ID\" TEXT," + // 2: orderId
                "\"DISH_ID\" TEXT," + // 3: dishId
                "\"DISH_NAME\" TEXT," + // 4: dishName
                "\"DISH_COUNT\" REAL," + // 5: dishCount
                "\"SPECIFY_ID\" TEXT," + // 6: specifyId
                "\"DISH_SPECIFY\" TEXT," + // 7: dishSpecify
                "\"PRACTICE_ID\" TEXT," + // 8: practiceId
                "\"DISH_PRACTICE\" TEXT," + // 9: dishPractice
                "\"DISH_NOTE\" TEXT," + // 10: dishNote
                "\"IS_ORDERED\" INTEGER," + // 11: isOrdered
                "\"ORDERED_TIME\" INTEGER," + // 12: orderedTime
                "\"DISH_PRICE\" REAL," + // 13: dishPrice
                "\"TYPE\" INTEGER," + // 14: type
                "\"IS_ABLE_DISCOUNT\" INTEGER," + // 15: isAbleDiscount
                "\"DISH_TYPE_ID\" TEXT," + // 16: dishTypeId
                "\"DISH_TYPE_NAME\" TEXT," + // 17: dishTypeName
                "\"IS_FROM_WX\" INTEGER," + // 18: isFromWX
                "\"IS_PRESENT\" INTEGER," + // 19: isPresent
                "\"IS_RETREAT\" INTEGER," + // 20: isRetreat
                "\"IS_PRINT\" INTEGER);"); // 21: isPrint
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_DISH_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OrderDishEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getOrderDishId());
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(3, orderId);
        }
 
        String dishId = entity.getDishId();
        if (dishId != null) {
            stmt.bindString(4, dishId);
        }
 
        String dishName = entity.getDishName();
        if (dishName != null) {
            stmt.bindString(5, dishName);
        }
 
        Double dishCount = entity.getDishCount();
        if (dishCount != null) {
            stmt.bindDouble(6, dishCount);
        }
 
        String specifyId = entity.getSpecifyId();
        if (specifyId != null) {
            stmt.bindString(7, specifyId);
        }
 
        String dishSpecify = entity.getDishSpecify();
        if (dishSpecify != null) {
            stmt.bindString(8, dishSpecify);
        }
 
        String practiceId = entity.getPracticeId();
        if (practiceId != null) {
            stmt.bindString(9, practiceId);
        }
 
        String dishPractice = entity.getDishPractice();
        if (dishPractice != null) {
            stmt.bindString(10, dishPractice);
        }
 
        String dishNote = entity.getDishNote();
        if (dishNote != null) {
            stmt.bindString(11, dishNote);
        }
 
        Integer isOrdered = entity.getIsOrdered();
        if (isOrdered != null) {
            stmt.bindLong(12, isOrdered);
        }
 
        Long orderedTime = entity.getOrderedTime();
        if (orderedTime != null) {
            stmt.bindLong(13, orderedTime);
        }
 
        Float dishPrice = entity.getDishPrice();
        if (dishPrice != null) {
            stmt.bindDouble(14, dishPrice);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(15, type);
        }
 
        Integer isAbleDiscount = entity.getIsAbleDiscount();
        if (isAbleDiscount != null) {
            stmt.bindLong(16, isAbleDiscount);
        }
 
        String dishTypeId = entity.getDishTypeId();
        if (dishTypeId != null) {
            stmt.bindString(17, dishTypeId);
        }
 
        String dishTypeName = entity.getDishTypeName();
        if (dishTypeName != null) {
            stmt.bindString(18, dishTypeName);
        }
 
        Integer isFromWX = entity.getIsFromWX();
        if (isFromWX != null) {
            stmt.bindLong(19, isFromWX);
        }
 
        Integer isPresent = entity.getIsPresent();
        if (isPresent != null) {
            stmt.bindLong(20, isPresent);
        }
 
        Integer isRetreat = entity.getIsRetreat();
        if (isRetreat != null) {
            stmt.bindLong(21, isRetreat);
        }
 
        Integer isPrint = entity.getIsPrint();
        if (isPrint != null) {
            stmt.bindLong(22, isPrint);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OrderDishEntity readEntity(Cursor cursor, int offset) {
        OrderDishEntity entity = new OrderDishEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // orderDishId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dishId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dishName
            cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5), // dishCount
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // specifyId
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // dishSpecify
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // practiceId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // dishPractice
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // dishNote
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // isOrdered
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // orderedTime
            cursor.isNull(offset + 13) ? null : cursor.getFloat(offset + 13), // dishPrice
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // type
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // isAbleDiscount
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // dishTypeId
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // dishTypeName
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // isFromWX
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // isPresent
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // isRetreat
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21) // isPrint
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OrderDishEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOrderDishId(cursor.getString(offset + 1));
        entity.setOrderId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDishId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDishName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDishCount(cursor.isNull(offset + 5) ? null : cursor.getDouble(offset + 5));
        entity.setSpecifyId(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDishSpecify(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPracticeId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDishPractice(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDishNote(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsOrdered(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setOrderedTime(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setDishPrice(cursor.isNull(offset + 13) ? null : cursor.getFloat(offset + 13));
        entity.setType(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setIsAbleDiscount(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setDishTypeId(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setDishTypeName(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setIsFromWX(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setIsPresent(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setIsRetreat(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setIsPrint(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OrderDishEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OrderDishEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
