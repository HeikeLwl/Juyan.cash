package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "WX_ORDER_MESSAGE_ENTITY".
*/
public class WxOrderMessageEntityDao extends AbstractDao<WxOrderMessageEntity, Long> {

    public static final String TABLENAME = "WX_ORDER_MESSAGE_ENTITY";

    /**
     * Properties of entity WxOrderMessageEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property WxOrderMessageId = new Property(1, String.class, "wxOrderMessageId", false, "WX_ORDER_MESSAGE_ID");
        public final static Property WxOrderMessageName = new Property(2, Integer.class, "wxOrderMessageName", false, "WX_ORDER_MESSAGE_NAME");
        public final static Property AreaName = new Property(3, String.class, "areaName", false, "AREA_NAME");
        public final static Property TableName = new Property(4, String.class, "tableName", false, "TABLE_NAME");
        public final static Property TableCode = new Property(5, String.class, "tableCode", false, "TABLE_CODE");
        public final static Property OrderNumber = new Property(6, Integer.class, "orderNumber", false, "ORDER_NUMBER");
        public final static Property OrderId = new Property(7, String.class, "orderId", false, "ORDER_ID");
    };


    public WxOrderMessageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public WxOrderMessageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WX_ORDER_MESSAGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"WX_ORDER_MESSAGE_ID\" TEXT," + // 1: wxOrderMessageId
                "\"WX_ORDER_MESSAGE_NAME\" INTEGER," + // 2: wxOrderMessageName
                "\"AREA_NAME\" TEXT," + // 3: areaName
                "\"TABLE_NAME\" TEXT," + // 4: tableName
                "\"TABLE_CODE\" TEXT," + // 5: tableCode
                "\"ORDER_NUMBER\" INTEGER," + // 6: orderNumber
                "\"ORDER_ID\" TEXT);"); // 7: orderId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WX_ORDER_MESSAGE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, WxOrderMessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String wxOrderMessageId = entity.getWxOrderMessageId();
        if (wxOrderMessageId != null) {
            stmt.bindString(2, wxOrderMessageId);
        }
 
        Integer wxOrderMessageName = entity.getWxOrderMessageName();
        if (wxOrderMessageName != null) {
            stmt.bindLong(3, wxOrderMessageName);
        }
 
        String areaName = entity.getAreaName();
        if (areaName != null) {
            stmt.bindString(4, areaName);
        }
 
        String tableName = entity.getTableName();
        if (tableName != null) {
            stmt.bindString(5, tableName);
        }
 
        String tableCode = entity.getTableCode();
        if (tableCode != null) {
            stmt.bindString(6, tableCode);
        }
 
        Integer orderNumber = entity.getOrderNumber();
        if (orderNumber != null) {
            stmt.bindLong(7, orderNumber);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(8, orderId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public WxOrderMessageEntity readEntity(Cursor cursor, int offset) {
        WxOrderMessageEntity entity = new WxOrderMessageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // wxOrderMessageId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // wxOrderMessageName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // areaName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tableName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tableCode
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // orderNumber
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // orderId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, WxOrderMessageEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWxOrderMessageId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setWxOrderMessageName(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setAreaName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTableName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTableCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrderNumber(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setOrderId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(WxOrderMessageEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(WxOrderMessageEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
