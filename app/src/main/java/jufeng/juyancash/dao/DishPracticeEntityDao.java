package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO four table "DISH_PRACTICE_ENTITY".
*/
public class DishPracticeEntityDao extends AbstractDao<DishPracticeEntity, Long> {

    public static final String TABLENAME = "DISH_PRACTICE_ENTITY";

    /**
     * Properties of entity DishPracticeEntity.<br/>
     * Can be used four QueryBuilder and four referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DishPracticeId = new Property(1, String.class, "dishPracticeId", false, "DISH_PRACTICE_ID");
        public final static Property PracticeId = new Property(2, String.class, "practiceId", false, "PRACTICE_ID");
        public final static Property DishId = new Property(3, String.class, "dishId", false, "DISH_ID");
        public final static Property IncreaseMode = new Property(4, Integer.class, "increaseMode", false, "INCREASE_MODE");
        public final static Property IncreaseValue = new Property(5, Float.class, "increaseValue", false, "INCREASE_VALUE");
    }


    public DishPracticeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DishPracticeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISH_PRACTICE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"DISH_PRACTICE_ID\" TEXT NOT NULL UNIQUE ," + // 1: dishPracticeId
                "\"PRACTICE_ID\" TEXT," + // 2: practiceId
                "\"DISH_ID\" TEXT," + // 3: dishId
                "\"INCREASE_MODE\" INTEGER," + // 4: increaseMode
                "\"INCREASE_VALUE\" REAL);"); // 5: increaseValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISH_PRACTICE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DishPracticeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDishPracticeId());
 
        String practiceId = entity.getPracticeId();
        if (practiceId != null) {
            stmt.bindString(3, practiceId);
        }
 
        String dishId = entity.getDishId();
        if (dishId != null) {
            stmt.bindString(4, dishId);
        }
 
        Integer increaseMode = entity.getIncreaseMode();
        if (increaseMode != null) {
            stmt.bindLong(5, increaseMode);
        }
 
        Float increaseValue = entity.getIncreaseValue();
        if (increaseValue != null) {
            stmt.bindDouble(6, increaseValue);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DishPracticeEntity readEntity(Cursor cursor, int offset) {
        DishPracticeEntity entity = new DishPracticeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // dishPracticeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // practiceId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dishId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // increaseMode
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5) // increaseValue
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DishPracticeEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDishPracticeId(cursor.getString(offset + 1));
        entity.setPracticeId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDishId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIncreaseMode(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setIncreaseValue(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DishPracticeEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DishPracticeEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
