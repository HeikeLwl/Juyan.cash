package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PAY_MODE_ENTITY".
*/
public class PayModeEntityDao extends AbstractDao<PayModeEntity, Long> {

    public static final String TABLENAME = "PAY_MODE_ENTITY";

    /**
     * Properties of entity PayModeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PayModeId = new Property(1, String.class, "payModeId", false, "PAY_MODE_ID");
        public final static Property OrderId = new Property(2, String.class, "orderId", false, "ORDER_ID");
        public final static Property PaymentId = new Property(3, String.class, "paymentId", false, "PAYMENT_ID");
        public final static Property PaymentName = new Property(4, String.class, "paymentName", false, "PAYMENT_NAME");
        public final static Property PaymentType = new Property(5, Integer.class, "paymentType", false, "PAYMENT_TYPE");
        public final static Property PayMoney = new Property(6, Float.class, "payMoney", false, "PAY_MONEY");
        public final static Property PayBalance = new Property(7, Float.class, "payBalance", false, "PAY_BALANCE");
        public final static Property PayTime = new Property(8, Long.class, "payTime", false, "PAY_TIME");
        public final static Property IsJoinOrderPay = new Property(9, Integer.class, "isJoinOrderPay", false, "IS_JOIN_ORDER_PAY");
        public final static Property ElectricOrderSerial = new Property(10, String.class, "electricOrderSerial", false, "ELECTRIC_ORDER_SERIAL");
    }


    public PayModeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PayModeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PAY_MODE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"PAY_MODE_ID\" TEXT NOT NULL UNIQUE ," + // 1: payModeId
                "\"ORDER_ID\" TEXT," + // 2: orderId
                "\"PAYMENT_ID\" TEXT," + // 3: paymentId
                "\"PAYMENT_NAME\" TEXT," + // 4: paymentName
                "\"PAYMENT_TYPE\" INTEGER," + // 5: paymentType
                "\"PAY_MONEY\" REAL," + // 6: payMoney
                "\"PAY_BALANCE\" REAL," + // 7: payBalance
                "\"PAY_TIME\" INTEGER," + // 8: payTime
                "\"IS_JOIN_ORDER_PAY\" INTEGER," + // 9: isJoinOrderPay
                "\"ELECTRIC_ORDER_SERIAL\" TEXT);"); // 10: electricOrderSerial
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PAY_MODE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PayModeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPayModeId());
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(3, orderId);
        }
 
        String paymentId = entity.getPaymentId();
        if (paymentId != null) {
            stmt.bindString(4, paymentId);
        }
 
        String paymentName = entity.getPaymentName();
        if (paymentName != null) {
            stmt.bindString(5, paymentName);
        }
 
        Integer paymentType = entity.getPaymentType();
        if (paymentType != null) {
            stmt.bindLong(6, paymentType);
        }
 
        Float payMoney = entity.getPayMoney();
        if (payMoney != null) {
            stmt.bindDouble(7, payMoney);
        }
 
        Float payBalance = entity.getPayBalance();
        if (payBalance != null) {
            stmt.bindDouble(8, payBalance);
        }
 
        Long payTime = entity.getPayTime();
        if (payTime != null) {
            stmt.bindLong(9, payTime);
        }
 
        Integer isJoinOrderPay = entity.getIsJoinOrderPay();
        if (isJoinOrderPay != null) {
            stmt.bindLong(10, isJoinOrderPay);
        }
 
        String electricOrderSerial = entity.getElectricOrderSerial();
        if (electricOrderSerial != null) {
            stmt.bindString(11, electricOrderSerial);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PayModeEntity readEntity(Cursor cursor, int offset) {
        PayModeEntity entity = new PayModeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // payModeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // paymentId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // paymentName
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // paymentType
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // payMoney
            cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7), // payBalance
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // payTime
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // isJoinOrderPay
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // electricOrderSerial
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PayModeEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPayModeId(cursor.getString(offset + 1));
        entity.setOrderId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPaymentId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPaymentName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPaymentType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPayMoney(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setPayBalance(cursor.isNull(offset + 7) ? null : cursor.getFloat(offset + 7));
        entity.setPayTime(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setIsJoinOrderPay(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setElectricOrderSerial(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PayModeEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PayModeEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
