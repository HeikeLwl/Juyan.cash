package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO four table "PRINT_KITCHEN_ENTITY".
*/
public class PrintKitchenEntityDao extends AbstractDao<PrintKitchenEntity, Long> {

    public static final String TABLENAME = "PRINT_KITCHEN_ENTITY";

    /**
     * Properties of entity PrintKitchenEntity.<br/>
     * Can be used four QueryBuilder and four referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PrintKitchenId = new Property(1, String.class, "printKitchenId", false, "PRINT_KITCHEN_ID");
        public final static Property PrinterType = new Property(2, Integer.class, "printerType", false, "PRINTER_TYPE");
        public final static Property PrintKitchenName = new Property(3, String.class, "printKitchenName", false, "PRINT_KITCHEN_NAME");
        public final static Property PrintKitchenIp = new Property(4, String.class, "printKitchenIp", false, "PRINT_KITCHEN_IP");
        public final static Property PrintPaperWidth = new Property(5, Integer.class, "printPaperWidth", false, "PRINT_PAPER_WIDTH");
        public final static Property PrintRowCharacter = new Property(6, Integer.class, "printRowCharacter", false, "PRINT_ROW_CHARACTER");
        public final static Property PrintCount = new Property(7, Integer.class, "printCount", false, "PRINT_COUNT");
        public final static Property IsOneDishOneCut = new Property(8, Integer.class, "isOneDishOneCut", false, "IS_ONE_DISH_ONE_CUT");
        public final static Property IsPrintTotalOrder = new Property(9, Integer.class, "isPrintTotalOrder", false, "IS_PRINT_TOTAL_ORDER");
        public final static Property ConnectStatus = new Property(10, Integer.class, "connectStatus", false, "CONNECT_STATUS");
    }


    public PrintKitchenEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PrintKitchenEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRINT_KITCHEN_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"PRINT_KITCHEN_ID\" TEXT NOT NULL UNIQUE ," + // 1: printKitchenId
                "\"PRINTER_TYPE\" INTEGER," + // 2: printerType
                "\"PRINT_KITCHEN_NAME\" TEXT," + // 3: printKitchenName
                "\"PRINT_KITCHEN_IP\" TEXT," + // 4: printKitchenIp
                "\"PRINT_PAPER_WIDTH\" INTEGER," + // 5: printPaperWidth
                "\"PRINT_ROW_CHARACTER\" INTEGER," + // 6: printRowCharacter
                "\"PRINT_COUNT\" INTEGER," + // 7: printCount
                "\"IS_ONE_DISH_ONE_CUT\" INTEGER," + // 8: isOneDishOneCut
                "\"IS_PRINT_TOTAL_ORDER\" INTEGER," + // 9: isPrintTotalOrder
                "\"CONNECT_STATUS\" INTEGER);"); // 10: connectStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRINT_KITCHEN_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PrintKitchenEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPrintKitchenId());
 
        Integer printerType = entity.getPrinterType();
        if (printerType != null) {
            stmt.bindLong(3, printerType);
        }
 
        String printKitchenName = entity.getPrintKitchenName();
        if (printKitchenName != null) {
            stmt.bindString(4, printKitchenName);
        }
 
        String printKitchenIp = entity.getPrintKitchenIp();
        if (printKitchenIp != null) {
            stmt.bindString(5, printKitchenIp);
        }
 
        Integer printPaperWidth = entity.getPrintPaperWidth();
        if (printPaperWidth != null) {
            stmt.bindLong(6, printPaperWidth);
        }
 
        Integer printRowCharacter = entity.getPrintRowCharacter();
        if (printRowCharacter != null) {
            stmt.bindLong(7, printRowCharacter);
        }
 
        Integer printCount = entity.getPrintCount();
        if (printCount != null) {
            stmt.bindLong(8, printCount);
        }
 
        Integer isOneDishOneCut = entity.getIsOneDishOneCut();
        if (isOneDishOneCut != null) {
            stmt.bindLong(9, isOneDishOneCut);
        }
 
        Integer isPrintTotalOrder = entity.getIsPrintTotalOrder();
        if (isPrintTotalOrder != null) {
            stmt.bindLong(10, isPrintTotalOrder);
        }
 
        Integer connectStatus = entity.getConnectStatus();
        if (connectStatus != null) {
            stmt.bindLong(11, connectStatus);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PrintKitchenEntity readEntity(Cursor cursor, int offset) {
        PrintKitchenEntity entity = new PrintKitchenEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // printKitchenId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // printerType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // printKitchenName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // printKitchenIp
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // printPaperWidth
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // printRowCharacter
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // printCount
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // isOneDishOneCut
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // isPrintTotalOrder
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // connectStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PrintKitchenEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPrintKitchenId(cursor.getString(offset + 1));
        entity.setPrinterType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPrintKitchenName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrintKitchenIp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrintPaperWidth(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPrintRowCharacter(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPrintCount(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsOneDishOneCut(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIsPrintTotalOrder(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setConnectStatus(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PrintKitchenEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PrintKitchenEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
