package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO four table "KICHEN_PRINT_ENTITY".
*/
public class KichenPrintEntityDao extends AbstractDao<KichenPrintEntity, Long> {

    public static final String TABLENAME = "KICHEN_PRINT_ENTITY";

    /**
     * Properties of entity KichenPrintEntity.<br/>
     * Can be used four QueryBuilder and four referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property KichenId = new Property(1, String.class, "kichenId", false, "KICHEN_ID");
        public final static Property PrinterType = new Property(2, Integer.class, "printerType", false, "PRINTER_TYPE");
        public final static Property PrinterName = new Property(3, String.class, "printerName", false, "PRINTER_NAME");
        public final static Property PrinterIp = new Property(4, String.class, "printerIp", false, "PRINTER_IP");
        public final static Property PaperWidth = new Property(5, Integer.class, "paperWidth", false, "PAPER_WIDTH");
        public final static Property PrintChars = new Property(6, Integer.class, "printChars", false, "PRINT_CHARS");
        public final static Property PrintNumber = new Property(7, Integer.class, "printNumber", false, "PRINT_NUMBER");
        public final static Property IsOneCut = new Property(8, Integer.class, "isOneCut", false, "IS_ONE_CUT");
        public final static Property IsTotalCut = new Property(9, Integer.class, "isTotalCut", false, "IS_TOTAL_CUT");
        public final static Property ConnectStatus = new Property(10, Integer.class, "connectStatus", false, "CONNECT_STATUS");
    }


    public KichenPrintEntityDao(DaoConfig config) {
        super(config);
    }
    
    public KichenPrintEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KICHEN_PRINT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"KICHEN_ID\" TEXT NOT NULL UNIQUE ," + // 1: kichenId
                "\"PRINTER_TYPE\" INTEGER," + // 2: printerType
                "\"PRINTER_NAME\" TEXT," + // 3: printerName
                "\"PRINTER_IP\" TEXT," + // 4: printerIp
                "\"PAPER_WIDTH\" INTEGER," + // 5: paperWidth
                "\"PRINT_CHARS\" INTEGER," + // 6: printChars
                "\"PRINT_NUMBER\" INTEGER," + // 7: printNumber
                "\"IS_ONE_CUT\" INTEGER," + // 8: isOneCut
                "\"IS_TOTAL_CUT\" INTEGER," + // 9: isTotalCut
                "\"CONNECT_STATUS\" INTEGER);"); // 10: connectStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KICHEN_PRINT_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, KichenPrintEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getKichenId());
 
        Integer printerType = entity.getPrinterType();
        if (printerType != null) {
            stmt.bindLong(3, printerType);
        }
 
        String printerName = entity.getPrinterName();
        if (printerName != null) {
            stmt.bindString(4, printerName);
        }
 
        String printerIp = entity.getPrinterIp();
        if (printerIp != null) {
            stmt.bindString(5, printerIp);
        }
 
        Integer paperWidth = entity.getPaperWidth();
        if (paperWidth != null) {
            stmt.bindLong(6, paperWidth);
        }
 
        Integer printChars = entity.getPrintChars();
        if (printChars != null) {
            stmt.bindLong(7, printChars);
        }
 
        Integer printNumber = entity.getPrintNumber();
        if (printNumber != null) {
            stmt.bindLong(8, printNumber);
        }
 
        Integer isOneCut = entity.getIsOneCut();
        if (isOneCut != null) {
            stmt.bindLong(9, isOneCut);
        }
 
        Integer isTotalCut = entity.getIsTotalCut();
        if (isTotalCut != null) {
            stmt.bindLong(10, isTotalCut);
        }
 
        Integer connectStatus = entity.getConnectStatus();
        if (connectStatus != null) {
            stmt.bindLong(11, connectStatus);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public KichenPrintEntity readEntity(Cursor cursor, int offset) {
        KichenPrintEntity entity = new KichenPrintEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // kichenId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // printerType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // printerName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // printerIp
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // paperWidth
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // printChars
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // printNumber
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // isOneCut
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // isTotalCut
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10) // connectStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, KichenPrintEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setKichenId(cursor.getString(offset + 1));
        entity.setPrinterType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setPrinterName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrinterIp(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPaperWidth(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPrintChars(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPrintNumber(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsOneCut(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setIsTotalCut(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setConnectStatus(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(KichenPrintEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(KichenPrintEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
