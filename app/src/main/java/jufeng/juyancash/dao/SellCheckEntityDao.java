package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "SELL_CHECK_ENTITY".
*/
public class SellCheckEntityDao extends AbstractDao<SellCheckEntity, Long> {

    public static final String TABLENAME = "SELL_CHECK_ENTITY";

    /**
     * Properties of entity SellCheckEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SellCheckId = new Property(1, String.class, "sellCheckId", false, "SELL_CHECK_ID");
        public final static Property IsSellOut = new Property(2, Integer.class, "isSellOut", false, "IS_SELL_OUT");
        public final static Property Stock = new Property(3, Double.class, "stock", false, "STOCK");
        public final static Property UnitName = new Property(4, String.class, "unitName", false, "UNIT_NAME");
        public final static Property DishId = new Property(5, String.class, "dishId", false, "DISH_ID");
        public final static Property Type = new Property(6, Integer.class, "type", false, "TYPE");
        public final static Property EarlyWarning = new Property(7, Integer.class, "earlyWarning", false, "EARLY_WARNING");
    };


    public SellCheckEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SellCheckEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SELL_CHECK_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"SELL_CHECK_ID\" TEXT NOT NULL UNIQUE ," + // 1: sellCheckId
                "\"IS_SELL_OUT\" INTEGER," + // 2: isSellOut
                "\"STOCK\" REAL," + // 3: stock
                "\"UNIT_NAME\" TEXT," + // 4: unitName
                "\"DISH_ID\" TEXT," + // 5: dishId
                "\"TYPE\" INTEGER," + // 6: type
                "\"EARLY_WARNING\" INTEGER);"); // 7: earlyWarning
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SELL_CHECK_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SellCheckEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSellCheckId());
 
        Integer isSellOut = entity.getIsSellOut();
        if (isSellOut != null) {
            stmt.bindLong(3, isSellOut);
        }
 
        Double stock = entity.getStock();
        if (stock != null) {
            stmt.bindDouble(4, stock);
        }
 
        String unitName = entity.getUnitName();
        if (unitName != null) {
            stmt.bindString(5, unitName);
        }
 
        String dishId = entity.getDishId();
        if (dishId != null) {
            stmt.bindString(6, dishId);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(7, type);
        }
 
        Integer earlyWarning = entity.getEarlyWarning();
        if (earlyWarning != null) {
            stmt.bindLong(8, earlyWarning);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SellCheckEntity readEntity(Cursor cursor, int offset) {
        SellCheckEntity entity = new SellCheckEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // sellCheckId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // isSellOut
            cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3), // stock
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // unitName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dishId
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // type
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // earlyWarning
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SellCheckEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSellCheckId(cursor.getString(offset + 1));
        entity.setIsSellOut(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setStock(cursor.isNull(offset + 3) ? null : cursor.getDouble(offset + 3));
        entity.setUnitName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDishId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setEarlyWarning(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SellCheckEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SellCheckEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
