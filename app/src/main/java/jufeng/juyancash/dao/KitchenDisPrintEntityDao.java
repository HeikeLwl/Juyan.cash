package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO four table "KITCHEN_DIS_PRINT_ENTITY".
*/
public class KitchenDisPrintEntityDao extends AbstractDao<KitchenDisPrintEntity, Long> {

    public static final String TABLENAME = "KITCHEN_DIS_PRINT_ENTITY";

    /**
     * Properties of entity KitchenDisPrintEntity.<br/>
     * Can be used four QueryBuilder and four referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PrintTime = new Property(1, Long.class, "printTime", false, "PRINT_TIME");
        public final static Property OrderId = new Property(2, String.class, "orderId", false, "ORDER_ID");
        public final static Property DishId = new Property(3, String.class, "dishId", false, "DISH_ID");
        public final static Property KitchenId = new Property(4, String.class, "kitchenId", false, "KITCHEN_ID");
    }


    public KitchenDisPrintEntityDao(DaoConfig config) {
        super(config);
    }
    
    public KitchenDisPrintEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KITCHEN_DIS_PRINT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"PRINT_TIME\" INTEGER," + // 1: printTime
                "\"ORDER_ID\" TEXT," + // 2: orderId
                "\"DISH_ID\" TEXT," + // 3: dishId
                "\"KITCHEN_ID\" TEXT);"); // 4: kitchenId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KITCHEN_DIS_PRINT_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, KitchenDisPrintEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long printTime = entity.getPrintTime();
        if (printTime != null) {
            stmt.bindLong(2, printTime);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(3, orderId);
        }
 
        String dishId = entity.getDishId();
        if (dishId != null) {
            stmt.bindString(4, dishId);
        }
 
        String kitchenId = entity.getKitchenId();
        if (kitchenId != null) {
            stmt.bindString(5, kitchenId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public KitchenDisPrintEntity readEntity(Cursor cursor, int offset) {
        KitchenDisPrintEntity entity = new KitchenDisPrintEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // printTime
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dishId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // kitchenId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, KitchenDisPrintEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPrintTime(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setOrderId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDishId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setKitchenId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(KitchenDisPrintEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(KitchenDisPrintEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
