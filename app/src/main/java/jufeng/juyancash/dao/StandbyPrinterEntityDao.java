package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO four table "STANDBY_PRINTER_ENTITY".
*/
public class StandbyPrinterEntityDao extends AbstractDao<StandbyPrinterEntity, Long> {

    public static final String TABLENAME = "STANDBY_PRINTER_ENTITY";

    /**
     * Properties of entity StandbyPrinterEntity.<br/>
     * Can be used four QueryBuilder and four referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StandbyPrinterId = new Property(1, String.class, "standbyPrinterId", false, "STANDBY_PRINTER_ID");
        public final static Property StandbyPrinterIp = new Property(2, String.class, "standbyPrinterIp", false, "STANDBY_PRINTER_IP");
        public final static Property OldPrinterIp = new Property(3, String.class, "oldPrinterIp", false, "OLD_PRINTER_IP");
    }


    public StandbyPrinterEntityDao(DaoConfig config) {
        super(config);
    }
    
    public StandbyPrinterEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STANDBY_PRINTER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"STANDBY_PRINTER_ID\" TEXT NOT NULL UNIQUE ," + // 1: standbyPrinterId
                "\"STANDBY_PRINTER_IP\" TEXT," + // 2: standbyPrinterIp
                "\"OLD_PRINTER_IP\" TEXT);"); // 3: oldPrinterIp
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STANDBY_PRINTER_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StandbyPrinterEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getStandbyPrinterId());
 
        String standbyPrinterIp = entity.getStandbyPrinterIp();
        if (standbyPrinterIp != null) {
            stmt.bindString(3, standbyPrinterIp);
        }
 
        String oldPrinterIp = entity.getOldPrinterIp();
        if (oldPrinterIp != null) {
            stmt.bindString(4, oldPrinterIp);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public StandbyPrinterEntity readEntity(Cursor cursor, int offset) {
        StandbyPrinterEntity entity = new StandbyPrinterEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // standbyPrinterId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // standbyPrinterIp
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // oldPrinterIp
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StandbyPrinterEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStandbyPrinterId(cursor.getString(offset + 1));
        entity.setStandbyPrinterIp(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOldPrinterIp(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(StandbyPrinterEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(StandbyPrinterEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
