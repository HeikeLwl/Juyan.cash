package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "TAKE_OUT_ORDER_ENTITY".
*/
public class TakeOutOrderEntityDao extends AbstractDao<TakeOutOrderEntity, Long> {

    public static final String TABLENAME = "TAKE_OUT_ORDER_ENTITY";

    /**
     * Properties of entity TakeOutOrderEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TakeoutId = new Property(1, String.class, "takeoutId", false, "TAKEOUT_ID");
        public final static Property OrderId = new Property(2, String.class, "orderId", false, "ORDER_ID");
        public final static Property GuestName = new Property(3, String.class, "guestName", false, "GUEST_NAME");
        public final static Property GuestPhone = new Property(4, String.class, "guestPhone", false, "GUEST_PHONE");
        public final static Property TakeoutAddress = new Property(5, String.class, "takeoutAddress", false, "TAKEOUT_ADDRESS");
        public final static Property TakeoutTime = new Property(6, Long.class, "takeoutTime", false, "TAKEOUT_TIME");
        public final static Property TakeoutMark = new Property(7, String.class, "takeoutMark", false, "TAKEOUT_MARK");
        public final static Property BoxFee = new Property(8, Integer.class, "boxFee", false, "BOX_FEE");
        public final static Property DispatchFee = new Property(9, Integer.class, "dispatchFee", false, "DISPATCH_FEE");
        public final static Property OtherOrderId = new Property(10, String.class, "otherOrderId", false, "OTHER_ORDER_ID");
        public final static Property TakeoutFrom = new Property(11, Integer.class, "takeoutFrom", false, "TAKEOUT_FROM");
        public final static Property TakeoutStatus = new Property(12, Integer.class, "takeoutStatus", false, "TAKEOUT_STATUS");
    };


    public TakeOutOrderEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TakeOutOrderEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TAKE_OUT_ORDER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"TAKEOUT_ID\" TEXT NOT NULL UNIQUE ," + // 1: takeoutId
                "\"ORDER_ID\" TEXT," + // 2: orderId
                "\"GUEST_NAME\" TEXT," + // 3: guestName
                "\"GUEST_PHONE\" TEXT," + // 4: guestPhone
                "\"TAKEOUT_ADDRESS\" TEXT," + // 5: takeoutAddress
                "\"TAKEOUT_TIME\" INTEGER," + // 6: takeoutTime
                "\"TAKEOUT_MARK\" TEXT," + // 7: takeoutMark
                "\"BOX_FEE\" INTEGER," + // 8: boxFee
                "\"DISPATCH_FEE\" INTEGER," + // 9: dispatchFee
                "\"OTHER_ORDER_ID\" TEXT," + // 10: otherOrderId
                "\"TAKEOUT_FROM\" INTEGER," + // 11: takeoutFrom
                "\"TAKEOUT_STATUS\" INTEGER);"); // 12: takeoutStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TAKE_OUT_ORDER_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TakeOutOrderEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTakeoutId());
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(3, orderId);
        }
 
        String guestName = entity.getGuestName();
        if (guestName != null) {
            stmt.bindString(4, guestName);
        }
 
        String guestPhone = entity.getGuestPhone();
        if (guestPhone != null) {
            stmt.bindString(5, guestPhone);
        }
 
        String takeoutAddress = entity.getTakeoutAddress();
        if (takeoutAddress != null) {
            stmt.bindString(6, takeoutAddress);
        }
 
        Long takeoutTime = entity.getTakeoutTime();
        if (takeoutTime != null) {
            stmt.bindLong(7, takeoutTime);
        }
 
        String takeoutMark = entity.getTakeoutMark();
        if (takeoutMark != null) {
            stmt.bindString(8, takeoutMark);
        }
 
        Integer boxFee = entity.getBoxFee();
        if (boxFee != null) {
            stmt.bindLong(9, boxFee);
        }
 
        Integer dispatchFee = entity.getDispatchFee();
        if (dispatchFee != null) {
            stmt.bindLong(10, dispatchFee);
        }
 
        String otherOrderId = entity.getOtherOrderId();
        if (otherOrderId != null) {
            stmt.bindString(11, otherOrderId);
        }
 
        Integer takeoutFrom = entity.getTakeoutFrom();
        if (takeoutFrom != null) {
            stmt.bindLong(12, takeoutFrom);
        }
 
        Integer takeoutStatus = entity.getTakeoutStatus();
        if (takeoutStatus != null) {
            stmt.bindLong(13, takeoutStatus);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TakeOutOrderEntity readEntity(Cursor cursor, int offset) {
        TakeOutOrderEntity entity = new TakeOutOrderEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // takeoutId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // guestName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // guestPhone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // takeoutAddress
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // takeoutTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // takeoutMark
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // boxFee
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // dispatchFee
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // otherOrderId
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // takeoutFrom
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12) // takeoutStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TakeOutOrderEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTakeoutId(cursor.getString(offset + 1));
        entity.setOrderId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGuestName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGuestPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTakeoutAddress(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTakeoutTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setTakeoutMark(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBoxFee(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDispatchFee(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setOtherOrderId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setTakeoutFrom(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setTakeoutStatus(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TakeOutOrderEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TakeOutOrderEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
