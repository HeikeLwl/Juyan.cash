package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "BILL_ACCOUNT_HISTORY_ENTITY".
*/
public class BillAccountHistoryEntityDao extends AbstractDao<BillAccountHistoryEntity, Long> {

    public static final String TABLENAME = "BILL_ACCOUNT_HISTORY_ENTITY";

    /**
     * Properties of entity BillAccountHistoryEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BillAccountHistoryId = new Property(1, String.class, "billAccountHistoryId", false, "BILL_ACCOUNT_HISTORY_ID");
        public final static Property OrderId = new Property(2, String.class, "orderId", false, "ORDER_ID");
        public final static Property BillAccountId = new Property(3, String.class, "billAccountId", false, "BILL_ACCOUNT_ID");
        public final static Property BillAccountName = new Property(4, String.class, "billAccountName", false, "BILL_ACCOUNT_NAME");
        public final static Property BillAccountPersonId = new Property(5, String.class, "billAccountPersonId", false, "BILL_ACCOUNT_PERSON_ID");
        public final static Property BillAccountPersonName = new Property(6, String.class, "billAccountPersonName", false, "BILL_ACCOUNT_PERSON_NAME");
        public final static Property BillAccountUnitId = new Property(7, String.class, "billAccountUnitId", false, "BILL_ACCOUNT_UNIT_ID");
        public final static Property BillAccountUnitName = new Property(8, String.class, "billAccountUnitName", false, "BILL_ACCOUNT_UNIT_NAME");
        public final static Property BillAccountSignId = new Property(9, String.class, "billAccountSignId", false, "BILL_ACCOUNT_SIGN_ID");
        public final static Property BillAccountSignName = new Property(10, String.class, "billAccountSignName", false, "BILL_ACCOUNT_SIGN_NAME");
        public final static Property BillAccountMoney = new Property(11, Integer.class, "billAccountMoney", false, "BILL_ACCOUNT_MONEY");
        public final static Property CreateTime = new Property(12, Long.class, "createTime", false, "CREATE_TIME");
        public final static Property OrderNo = new Property(13, String.class, "orderNo", false, "ORDER_NO");
        public final static Property IsJoinOrder = new Property(14, Integer.class, "isJoinOrder", false, "IS_JOIN_ORDER");
    }


    public BillAccountHistoryEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BillAccountHistoryEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BILL_ACCOUNT_HISTORY_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"BILL_ACCOUNT_HISTORY_ID\" TEXT," + // 1: billAccountHistoryId
                "\"ORDER_ID\" TEXT," + // 2: orderId
                "\"BILL_ACCOUNT_ID\" TEXT," + // 3: billAccountId
                "\"BILL_ACCOUNT_NAME\" TEXT," + // 4: billAccountName
                "\"BILL_ACCOUNT_PERSON_ID\" TEXT," + // 5: billAccountPersonId
                "\"BILL_ACCOUNT_PERSON_NAME\" TEXT," + // 6: billAccountPersonName
                "\"BILL_ACCOUNT_UNIT_ID\" TEXT," + // 7: billAccountUnitId
                "\"BILL_ACCOUNT_UNIT_NAME\" TEXT," + // 8: billAccountUnitName
                "\"BILL_ACCOUNT_SIGN_ID\" TEXT," + // 9: billAccountSignId
                "\"BILL_ACCOUNT_SIGN_NAME\" TEXT," + // 10: billAccountSignName
                "\"BILL_ACCOUNT_MONEY\" INTEGER," + // 11: billAccountMoney
                "\"CREATE_TIME\" INTEGER," + // 12: createTime
                "\"ORDER_NO\" TEXT," + // 13: orderNo
                "\"IS_JOIN_ORDER\" INTEGER);"); // 14: isJoinOrder
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BILL_ACCOUNT_HISTORY_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BillAccountHistoryEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String billAccountHistoryId = entity.getBillAccountHistoryId();
        if (billAccountHistoryId != null) {
            stmt.bindString(2, billAccountHistoryId);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(3, orderId);
        }
 
        String billAccountId = entity.getBillAccountId();
        if (billAccountId != null) {
            stmt.bindString(4, billAccountId);
        }
 
        String billAccountName = entity.getBillAccountName();
        if (billAccountName != null) {
            stmt.bindString(5, billAccountName);
        }
 
        String billAccountPersonId = entity.getBillAccountPersonId();
        if (billAccountPersonId != null) {
            stmt.bindString(6, billAccountPersonId);
        }
 
        String billAccountPersonName = entity.getBillAccountPersonName();
        if (billAccountPersonName != null) {
            stmt.bindString(7, billAccountPersonName);
        }
 
        String billAccountUnitId = entity.getBillAccountUnitId();
        if (billAccountUnitId != null) {
            stmt.bindString(8, billAccountUnitId);
        }
 
        String billAccountUnitName = entity.getBillAccountUnitName();
        if (billAccountUnitName != null) {
            stmt.bindString(9, billAccountUnitName);
        }
 
        String billAccountSignId = entity.getBillAccountSignId();
        if (billAccountSignId != null) {
            stmt.bindString(10, billAccountSignId);
        }
 
        String billAccountSignName = entity.getBillAccountSignName();
        if (billAccountSignName != null) {
            stmt.bindString(11, billAccountSignName);
        }
 
        Integer billAccountMoney = entity.getBillAccountMoney();
        if (billAccountMoney != null) {
            stmt.bindLong(12, billAccountMoney);
        }
 
        Long createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindLong(13, createTime);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(14, orderNo);
        }
 
        Integer isJoinOrder = entity.getIsJoinOrder();
        if (isJoinOrder != null) {
            stmt.bindLong(15, isJoinOrder);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BillAccountHistoryEntity readEntity(Cursor cursor, int offset) {
        BillAccountHistoryEntity entity = new BillAccountHistoryEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // billAccountHistoryId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // billAccountId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // billAccountName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // billAccountPersonId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // billAccountPersonName
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // billAccountUnitId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // billAccountUnitName
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // billAccountSignId
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // billAccountSignName
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // billAccountMoney
            cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12), // createTime
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // orderNo
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14) // isJoinOrder
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BillAccountHistoryEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBillAccountHistoryId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBillAccountId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBillAccountName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setBillAccountPersonId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBillAccountPersonName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBillAccountUnitId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setBillAccountUnitName(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setBillAccountSignId(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setBillAccountSignName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setBillAccountMoney(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setCreateTime(cursor.isNull(offset + 12) ? null : cursor.getLong(offset + 12));
        entity.setOrderNo(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIsJoinOrder(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BillAccountHistoryEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BillAccountHistoryEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
