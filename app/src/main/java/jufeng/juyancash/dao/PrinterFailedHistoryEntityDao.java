package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "PRINTER_FAILED_HISTORY_ENTITY".
*/
public class PrinterFailedHistoryEntityDao extends AbstractDao<PrinterFailedHistoryEntity, Long> {

    public static final String TABLENAME = "PRINTER_FAILED_HISTORY_ENTITY";

    /**
     * Properties of entity PrinterFailedHistoryEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PrinterFailedHistoryId = new Property(1, String.class, "printerFailedHistoryId", false, "PRINTER_FAILED_HISTORY_ID");
        public final static Property PrintKitchenId = new Property(2, String.class, "printKitchenId", false, "PRINT_KITCHEN_ID");
        public final static Property OrderId = new Property(3, String.class, "orderId", false, "ORDER_ID");
        public final static Property PrintTime = new Property(4, Long.class, "printTime", false, "PRINT_TIME");
        public final static Property PrintDishType = new Property(5, String.class, "printDishType", false, "PRINT_DISH_TYPE");
        public final static Property PrintDish = new Property(6, String.class, "printDish", false, "PRINT_DISH");
        public final static Property PrintStatus = new Property(7, Integer.class, "printStatus", false, "PRINT_STATUS");
        public final static Property PrintType = new Property(8, Integer.class, "printType", false, "PRINT_TYPE");
    }


    public PrinterFailedHistoryEntityDao(DaoConfig config) {
        super(config);
    }
    
    public PrinterFailedHistoryEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRINTER_FAILED_HISTORY_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"PRINTER_FAILED_HISTORY_ID\" TEXT NOT NULL UNIQUE ," + // 1: printerFailedHistoryId
                "\"PRINT_KITCHEN_ID\" TEXT," + // 2: printKitchenId
                "\"ORDER_ID\" TEXT," + // 3: orderId
                "\"PRINT_TIME\" INTEGER," + // 4: printTime
                "\"PRINT_DISH_TYPE\" TEXT," + // 5: printDishType
                "\"PRINT_DISH\" TEXT," + // 6: printDish
                "\"PRINT_STATUS\" INTEGER," + // 7: printStatus
                "\"PRINT_TYPE\" INTEGER);"); // 8: printType
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRINTER_FAILED_HISTORY_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PrinterFailedHistoryEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPrinterFailedHistoryId());
 
        String printKitchenId = entity.getPrintKitchenId();
        if (printKitchenId != null) {
            stmt.bindString(3, printKitchenId);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(4, orderId);
        }
 
        Long printTime = entity.getPrintTime();
        if (printTime != null) {
            stmt.bindLong(5, printTime);
        }
 
        String printDishType = entity.getPrintDishType();
        if (printDishType != null) {
            stmt.bindString(6, printDishType);
        }
 
        String printDish = entity.getPrintDish();
        if (printDish != null) {
            stmt.bindString(7, printDish);
        }
 
        Integer printStatus = entity.getPrintStatus();
        if (printStatus != null) {
            stmt.bindLong(8, printStatus);
        }
 
        Integer printType = entity.getPrintType();
        if (printType != null) {
            stmt.bindLong(9, printType);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PrinterFailedHistoryEntity readEntity(Cursor cursor, int offset) {
        PrinterFailedHistoryEntity entity = new PrinterFailedHistoryEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // printerFailedHistoryId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // printKitchenId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orderId
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // printTime
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // printDishType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // printDish
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // printStatus
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // printType
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PrinterFailedHistoryEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPrinterFailedHistoryId(cursor.getString(offset + 1));
        entity.setPrintKitchenId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrderId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrintTime(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setPrintDishType(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPrintDish(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPrintStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setPrintType(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PrinterFailedHistoryEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PrinterFailedHistoryEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
