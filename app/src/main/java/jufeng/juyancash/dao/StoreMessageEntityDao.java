package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO four table "STORE_MESSAGE_ENTITY".
*/
public class StoreMessageEntityDao extends AbstractDao<StoreMessageEntity, Long> {

    public static final String TABLENAME = "STORE_MESSAGE_ENTITY";

    /**
     * Properties of entity StoreMessageEntity.<br/>
     * Can be used four QueryBuilder and four referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property StoreMessageId = new Property(1, String.class, "storeMessageId", false, "STORE_MESSAGE_ID");
        public final static Property StoreTitle = new Property(2, String.class, "storeTitle", false, "STORE_TITLE");
        public final static Property StoreTime = new Property(3, String.class, "storeTime", false, "STORE_TIME");
        public final static Property StoreContent = new Property(4, String.class, "storeContent", false, "STORE_CONTENT");
        public final static Property StoreImgUrl = new Property(5, String.class, "storeImgUrl", false, "STORE_IMG_URL");
        public final static Property IsRead = new Property(6, Integer.class, "isRead", false, "IS_READ");
    }


    public StoreMessageEntityDao(DaoConfig config) {
        super(config);
    }
    
    public StoreMessageEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STORE_MESSAGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"STORE_MESSAGE_ID\" TEXT NOT NULL UNIQUE ," + // 1: storeMessageId
                "\"STORE_TITLE\" TEXT," + // 2: storeTitle
                "\"STORE_TIME\" TEXT," + // 3: storeTime
                "\"STORE_CONTENT\" TEXT," + // 4: storeContent
                "\"STORE_IMG_URL\" TEXT," + // 5: storeImgUrl
                "\"IS_READ\" INTEGER);"); // 6: isRead
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STORE_MESSAGE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, StoreMessageEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getStoreMessageId());
 
        String storeTitle = entity.getStoreTitle();
        if (storeTitle != null) {
            stmt.bindString(3, storeTitle);
        }
 
        String storeTime = entity.getStoreTime();
        if (storeTime != null) {
            stmt.bindString(4, storeTime);
        }
 
        String storeContent = entity.getStoreContent();
        if (storeContent != null) {
            stmt.bindString(5, storeContent);
        }
 
        String storeImgUrl = entity.getStoreImgUrl();
        if (storeImgUrl != null) {
            stmt.bindString(6, storeImgUrl);
        }
 
        Integer isRead = entity.getIsRead();
        if (isRead != null) {
            stmt.bindLong(7, isRead);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public StoreMessageEntity readEntity(Cursor cursor, int offset) {
        StoreMessageEntity entity = new StoreMessageEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // storeMessageId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // storeTitle
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // storeTime
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // storeContent
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // storeImgUrl
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6) // isRead
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, StoreMessageEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setStoreMessageId(cursor.getString(offset + 1));
        entity.setStoreTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setStoreTime(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setStoreContent(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setStoreImgUrl(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsRead(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(StoreMessageEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(StoreMessageEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
