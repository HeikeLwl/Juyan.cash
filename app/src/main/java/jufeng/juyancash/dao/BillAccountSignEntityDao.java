package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO four table "BILL_ACCOUNT_SIGN_ENTITY".
*/
public class BillAccountSignEntityDao extends AbstractDao<BillAccountSignEntity, Long> {

    public static final String TABLENAME = "BILL_ACCOUNT_SIGN_ENTITY";

    /**
     * Properties of entity BillAccountSignEntity.<br/>
     * Can be used four QueryBuilder and four referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BillAccountSignId = new Property(1, String.class, "billAccountSignId", false, "BILL_ACCOUNT_SIGN_ID");
        public final static Property BillAccountId = new Property(2, String.class, "billAccountId", false, "BILL_ACCOUNT_ID");
        public final static Property BillAccountSignName = new Property(3, String.class, "billAccountSignName", false, "BILL_ACCOUNT_SIGN_NAME");
    }


    public BillAccountSignEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BillAccountSignEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BILL_ACCOUNT_SIGN_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"BILL_ACCOUNT_SIGN_ID\" TEXT," + // 1: billAccountSignId
                "\"BILL_ACCOUNT_ID\" TEXT," + // 2: billAccountId
                "\"BILL_ACCOUNT_SIGN_NAME\" TEXT);"); // 3: billAccountSignName
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BILL_ACCOUNT_SIGN_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BillAccountSignEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String billAccountSignId = entity.getBillAccountSignId();
        if (billAccountSignId != null) {
            stmt.bindString(2, billAccountSignId);
        }
 
        String billAccountId = entity.getBillAccountId();
        if (billAccountId != null) {
            stmt.bindString(3, billAccountId);
        }
 
        String billAccountSignName = entity.getBillAccountSignName();
        if (billAccountSignName != null) {
            stmt.bindString(4, billAccountSignName);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BillAccountSignEntity readEntity(Cursor cursor, int offset) {
        BillAccountSignEntity entity = new BillAccountSignEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // billAccountSignId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // billAccountId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // billAccountSignName
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BillAccountSignEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBillAccountSignId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBillAccountId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBillAccountSignName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BillAccountSignEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BillAccountSignEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
