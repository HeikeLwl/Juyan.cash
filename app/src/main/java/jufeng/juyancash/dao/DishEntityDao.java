package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DISH_ENTITY".
*/
public class DishEntityDao extends AbstractDao<DishEntity, Long> {

    public static final String TABLENAME = "DISH_ENTITY";

    /**
     * Properties of entity DishEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DishId = new Property(1, String.class, "dishId", false, "DISH_ID");
        public final static Property IsShelved = new Property(2, Integer.class, "isShelved", false, "IS_SHELVED");
        public final static Property DishTypeId = new Property(3, String.class, "dishTypeId", false, "DISH_TYPE_ID");
        public final static Property DishName = new Property(4, String.class, "dishName", false, "DISH_NAME");
        public final static Property DishCode = new Property(5, String.class, "dishCode", false, "DISH_CODE");
        public final static Property DishPrice = new Property(6, Float.class, "dishPrice", false, "DISH_PRICE");
        public final static Property CheckOutUnit = new Property(7, String.class, "checkOutUnit", false, "CHECK_OUT_UNIT");
        public final static Property OrderUnit = new Property(8, String.class, "orderUnit", false, "ORDER_UNIT");
        public final static Property IsSameUnit = new Property(9, Integer.class, "isSameUnit", false, "IS_SAME_UNIT");
        public final static Property IsAbleDiscount = new Property(10, Integer.class, "isAbleDiscount", false, "IS_ABLE_DISCOUNT");
        public final static Property CommissionType = new Property(11, Integer.class, "commissionType", false, "COMMISSION_TYPE");
        public final static Property CommissionValue = new Property(12, Float.class, "commissionValue", false, "COMMISSION_VALUE");
        public final static Property ServiceChargeType = new Property(13, Integer.class, "serviceChargeType", false, "SERVICE_CHARGE_TYPE");
        public final static Property ServiceChargeValue = new Property(14, Float.class, "serviceChargeValue", false, "SERVICE_CHARGE_VALUE");
        public final static Property IsAbleChangePrice = new Property(15, Integer.class, "isAbleChangePrice", false, "IS_ABLE_CHANGE_PRICE");
        public final static Property IsAbleRetreat = new Property(16, Integer.class, "isAbleRetreat", false, "IS_ABLE_RETREAT");
        public final static Property IsAblePresent = new Property(17, Integer.class, "isAblePresent", false, "IS_ABLE_PRESENT");
        public final static Property IsOnline = new Property(18, Integer.class, "isOnline", false, "IS_ONLINE");
        public final static Property DishCode1 = new Property(19, String.class, "dishCode1", false, "DISH_CODE1");
    };


    public DishEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DishEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISH_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"DISH_ID\" TEXT NOT NULL UNIQUE ," + // 1: dishId
                "\"IS_SHELVED\" INTEGER," + // 2: isShelved
                "\"DISH_TYPE_ID\" TEXT," + // 3: dishTypeId
                "\"DISH_NAME\" TEXT," + // 4: dishName
                "\"DISH_CODE\" TEXT," + // 5: dishCode
                "\"DISH_PRICE\" REAL," + // 6: dishPrice
                "\"CHECK_OUT_UNIT\" TEXT," + // 7: checkOutUnit
                "\"ORDER_UNIT\" TEXT," + // 8: orderUnit
                "\"IS_SAME_UNIT\" INTEGER," + // 9: isSameUnit
                "\"IS_ABLE_DISCOUNT\" INTEGER," + // 10: isAbleDiscount
                "\"COMMISSION_TYPE\" INTEGER," + // 11: commissionType
                "\"COMMISSION_VALUE\" REAL," + // 12: commissionValue
                "\"SERVICE_CHARGE_TYPE\" INTEGER," + // 13: serviceChargeType
                "\"SERVICE_CHARGE_VALUE\" REAL," + // 14: serviceChargeValue
                "\"IS_ABLE_CHANGE_PRICE\" INTEGER," + // 15: isAbleChangePrice
                "\"IS_ABLE_RETREAT\" INTEGER," + // 16: isAbleRetreat
                "\"IS_ABLE_PRESENT\" INTEGER," + // 17: isAblePresent
                "\"IS_ONLINE\" INTEGER," + // 18: isOnline
                "\"DISH_CODE1\" TEXT);"); // 19: dishCode1
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISH_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DishEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDishId());
 
        Integer isShelved = entity.getIsShelved();
        if (isShelved != null) {
            stmt.bindLong(3, isShelved);
        }
 
        String dishTypeId = entity.getDishTypeId();
        if (dishTypeId != null) {
            stmt.bindString(4, dishTypeId);
        }
 
        String dishName = entity.getDishName();
        if (dishName != null) {
            stmt.bindString(5, dishName);
        }
 
        String dishCode = entity.getDishCode();
        if (dishCode != null) {
            stmt.bindString(6, dishCode);
        }
 
        Float dishPrice = entity.getDishPrice();
        if (dishPrice != null) {
            stmt.bindDouble(7, dishPrice);
        }
 
        String checkOutUnit = entity.getCheckOutUnit();
        if (checkOutUnit != null) {
            stmt.bindString(8, checkOutUnit);
        }
 
        String orderUnit = entity.getOrderUnit();
        if (orderUnit != null) {
            stmt.bindString(9, orderUnit);
        }
 
        Integer isSameUnit = entity.getIsSameUnit();
        if (isSameUnit != null) {
            stmt.bindLong(10, isSameUnit);
        }
 
        Integer isAbleDiscount = entity.getIsAbleDiscount();
        if (isAbleDiscount != null) {
            stmt.bindLong(11, isAbleDiscount);
        }
 
        Integer commissionType = entity.getCommissionType();
        if (commissionType != null) {
            stmt.bindLong(12, commissionType);
        }
 
        Float commissionValue = entity.getCommissionValue();
        if (commissionValue != null) {
            stmt.bindDouble(13, commissionValue);
        }
 
        Integer serviceChargeType = entity.getServiceChargeType();
        if (serviceChargeType != null) {
            stmt.bindLong(14, serviceChargeType);
        }
 
        Float serviceChargeValue = entity.getServiceChargeValue();
        if (serviceChargeValue != null) {
            stmt.bindDouble(15, serviceChargeValue);
        }
 
        Integer isAbleChangePrice = entity.getIsAbleChangePrice();
        if (isAbleChangePrice != null) {
            stmt.bindLong(16, isAbleChangePrice);
        }
 
        Integer isAbleRetreat = entity.getIsAbleRetreat();
        if (isAbleRetreat != null) {
            stmt.bindLong(17, isAbleRetreat);
        }
 
        Integer isAblePresent = entity.getIsAblePresent();
        if (isAblePresent != null) {
            stmt.bindLong(18, isAblePresent);
        }
 
        Integer isOnline = entity.getIsOnline();
        if (isOnline != null) {
            stmt.bindLong(19, isOnline);
        }
 
        String dishCode1 = entity.getDishCode1();
        if (dishCode1 != null) {
            stmt.bindString(20, dishCode1);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DishEntity readEntity(Cursor cursor, int offset) {
        DishEntity entity = new DishEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // dishId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // isShelved
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dishTypeId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dishName
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dishCode
            cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6), // dishPrice
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // checkOutUnit
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // orderUnit
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // isSameUnit
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // isAbleDiscount
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // commissionType
            cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12), // commissionValue
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // serviceChargeType
            cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14), // serviceChargeValue
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // isAbleChangePrice
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // isAbleRetreat
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // isAblePresent
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // isOnline
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19) // dishCode1
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DishEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDishId(cursor.getString(offset + 1));
        entity.setIsShelved(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setDishTypeId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDishName(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDishCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDishPrice(cursor.isNull(offset + 6) ? null : cursor.getFloat(offset + 6));
        entity.setCheckOutUnit(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOrderUnit(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsSameUnit(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setIsAbleDiscount(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setCommissionType(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setCommissionValue(cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12));
        entity.setServiceChargeType(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setServiceChargeValue(cursor.isNull(offset + 14) ? null : cursor.getFloat(offset + 14));
        entity.setIsAbleChangePrice(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setIsAbleRetreat(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setIsAblePresent(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setIsOnline(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setDishCode1(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DishEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DishEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
