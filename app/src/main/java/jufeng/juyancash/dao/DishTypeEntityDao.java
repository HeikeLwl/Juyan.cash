package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO four table "DISH_TYPE_ENTITY".
*/
public class DishTypeEntityDao extends AbstractDao<DishTypeEntity, Long> {

    public static final String TABLENAME = "DISH_TYPE_ENTITY";

    /**
     * Properties of entity DishTypeEntity.<br/>
     * Can be used four QueryBuilder and four referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DishTypeId = new Property(1, String.class, "dishTypeId", false, "DISH_TYPE_ID");
        public final static Property DishTypeName = new Property(2, String.class, "dishTypeName", false, "DISH_TYPE_NAME");
        public final static Property IsHasParent = new Property(3, Integer.class, "isHasParent", false, "IS_HAS_PARENT");
        public final static Property ParentId = new Property(4, String.class, "parentId", false, "PARENT_ID");
        public final static Property DishTypeCode = new Property(5, String.class, "dishTypeCode", false, "DISH_TYPE_CODE");
        public final static Property IsSaleParent = new Property(6, Integer.class, "isSaleParent", false, "IS_SALE_PARENT");
        public final static Property SaleParentId = new Property(7, String.class, "saleParentId", false, "SALE_PARENT_ID");
        public final static Property CommissionType = new Property(8, Integer.class, "commissionType", false, "COMMISSION_TYPE");
        public final static Property CommissionValue = new Property(9, Float.class, "commissionValue", false, "COMMISSION_VALUE");
    }


    public DishTypeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DishTypeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISH_TYPE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"DISH_TYPE_ID\" TEXT NOT NULL UNIQUE ," + // 1: dishTypeId
                "\"DISH_TYPE_NAME\" TEXT," + // 2: dishTypeName
                "\"IS_HAS_PARENT\" INTEGER," + // 3: isHasParent
                "\"PARENT_ID\" TEXT," + // 4: parentId
                "\"DISH_TYPE_CODE\" TEXT," + // 5: dishTypeCode
                "\"IS_SALE_PARENT\" INTEGER," + // 6: isSaleParent
                "\"SALE_PARENT_ID\" TEXT," + // 7: saleParentId
                "\"COMMISSION_TYPE\" INTEGER," + // 8: commissionType
                "\"COMMISSION_VALUE\" REAL);"); // 9: commissionValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISH_TYPE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DishTypeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getDishTypeId());
 
        String dishTypeName = entity.getDishTypeName();
        if (dishTypeName != null) {
            stmt.bindString(3, dishTypeName);
        }
 
        Integer isHasParent = entity.getIsHasParent();
        if (isHasParent != null) {
            stmt.bindLong(4, isHasParent);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(5, parentId);
        }
 
        String dishTypeCode = entity.getDishTypeCode();
        if (dishTypeCode != null) {
            stmt.bindString(6, dishTypeCode);
        }
 
        Integer isSaleParent = entity.getIsSaleParent();
        if (isSaleParent != null) {
            stmt.bindLong(7, isSaleParent);
        }
 
        String saleParentId = entity.getSaleParentId();
        if (saleParentId != null) {
            stmt.bindString(8, saleParentId);
        }
 
        Integer commissionType = entity.getCommissionType();
        if (commissionType != null) {
            stmt.bindLong(9, commissionType);
        }
 
        Float commissionValue = entity.getCommissionValue();
        if (commissionValue != null) {
            stmt.bindDouble(10, commissionValue);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DishTypeEntity readEntity(Cursor cursor, int offset) {
        DishTypeEntity entity = new DishTypeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // dishTypeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // dishTypeName
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // isHasParent
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // parentId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // dishTypeCode
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // isSaleParent
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // saleParentId
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // commissionType
            cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9) // commissionValue
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DishTypeEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDishTypeId(cursor.getString(offset + 1));
        entity.setDishTypeName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIsHasParent(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setParentId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDishTypeCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsSaleParent(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setSaleParentId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setCommissionType(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setCommissionValue(cursor.isNull(offset + 9) ? null : cursor.getFloat(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DishTypeEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DishTypeEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
