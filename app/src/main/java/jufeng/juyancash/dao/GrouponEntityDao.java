package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO four table "GROUPON_ENTITY".
*/
public class GrouponEntityDao extends AbstractDao<GrouponEntity, Long> {

    public static final String TABLENAME = "GROUPON_ENTITY";

    /**
     * Properties of entity GrouponEntity.<br/>
     * Can be used four QueryBuilder and four referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property GrouponId = new Property(1, String.class, "grouponId", false, "GROUPON_ID");
        public final static Property GrouponName = new Property(2, String.class, "grouponName", false, "GROUPON_NAME");
        public final static Property GrouponCode = new Property(3, String.class, "grouponCode", false, "GROUPON_CODE");
    }


    public GrouponEntityDao(DaoConfig config) {
        super(config);
    }
    
    public GrouponEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GROUPON_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"GROUPON_ID\" TEXT NOT NULL UNIQUE ," + // 1: grouponId
                "\"GROUPON_NAME\" TEXT," + // 2: grouponName
                "\"GROUPON_CODE\" TEXT);"); // 3: grouponCode
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GROUPON_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GrouponEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getGrouponId());
 
        String grouponName = entity.getGrouponName();
        if (grouponName != null) {
            stmt.bindString(3, grouponName);
        }
 
        String grouponCode = entity.getGrouponCode();
        if (grouponCode != null) {
            stmt.bindString(4, grouponCode);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public GrouponEntity readEntity(Cursor cursor, int offset) {
        GrouponEntity entity = new GrouponEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // grouponId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // grouponName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // grouponCode
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GrouponEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGrouponId(cursor.getString(offset + 1));
        entity.setGrouponName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGrouponCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GrouponEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GrouponEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
