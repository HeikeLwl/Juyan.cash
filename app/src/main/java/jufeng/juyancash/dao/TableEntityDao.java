package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "TABLE_ENTITY".
*/
public class TableEntityDao extends AbstractDao<TableEntity, Long> {

    public static final String TABLENAME = "TABLE_ENTITY";

    /**
     * Properties of entity TableEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TableId = new Property(1, String.class, "tableId", false, "TABLE_ID");
        public final static Property AreaId = new Property(2, String.class, "areaId", false, "AREA_ID");
        public final static Property TableName = new Property(3, String.class, "tableName", false, "TABLE_NAME");
        public final static Property TableCode = new Property(4, String.class, "tableCode", false, "TABLE_CODE");
        public final static Property TableType = new Property(5, Integer.class, "tableType", false, "TABLE_TYPE");
        public final static Property TableSeat = new Property(6, Integer.class, "tableSeat", false, "TABLE_SEAT");
        public final static Property TableStatus = new Property(7, Integer.class, "tableStatus", false, "TABLE_STATUS");
        public final static Property IsLock = new Property(8, Integer.class, "isLock", false, "IS_LOCK");
    }


    public TableEntityDao(DaoConfig config) {
        super(config);
    }
    
    public TableEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TABLE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"TABLE_ID\" TEXT NOT NULL UNIQUE ," + // 1: tableId
                "\"AREA_ID\" TEXT," + // 2: areaId
                "\"TABLE_NAME\" TEXT NOT NULL ," + // 3: tableName
                "\"TABLE_CODE\" TEXT," + // 4: tableCode
                "\"TABLE_TYPE\" INTEGER," + // 5: tableType
                "\"TABLE_SEAT\" INTEGER," + // 6: tableSeat
                "\"TABLE_STATUS\" INTEGER," + // 7: tableStatus
                "\"IS_LOCK\" INTEGER);"); // 8: isLock
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TABLE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TableEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTableId());
 
        String areaId = entity.getAreaId();
        if (areaId != null) {
            stmt.bindString(3, areaId);
        }
        stmt.bindString(4, entity.getTableName());
 
        String tableCode = entity.getTableCode();
        if (tableCode != null) {
            stmt.bindString(5, tableCode);
        }
 
        Integer tableType = entity.getTableType();
        if (tableType != null) {
            stmt.bindLong(6, tableType);
        }
 
        Integer tableSeat = entity.getTableSeat();
        if (tableSeat != null) {
            stmt.bindLong(7, tableSeat);
        }
 
        Integer tableStatus = entity.getTableStatus();
        if (tableStatus != null) {
            stmt.bindLong(8, tableStatus);
        }
 
        Integer isLock = entity.getIsLock();
        if (isLock != null) {
            stmt.bindLong(9, isLock);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TableEntity readEntity(Cursor cursor, int offset) {
        TableEntity entity = new TableEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // tableId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // areaId
            cursor.getString(offset + 3), // tableName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // tableCode
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // tableType
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // tableSeat
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // tableStatus
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8) // isLock
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TableEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTableId(cursor.getString(offset + 1));
        entity.setAreaId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTableName(cursor.getString(offset + 3));
        entity.setTableCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTableType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setTableSeat(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setTableStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsLock(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TableEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TableEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
