package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO four table "SPECIFY_ENTITY".
*/
public class SpecifyEntityDao extends AbstractDao<SpecifyEntity, Long> {

    public static final String TABLENAME = "SPECIFY_ENTITY";

    /**
     * Properties of entity SpecifyEntity.<br/>
     * Can be used four QueryBuilder and four referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property SpecifyId = new Property(1, String.class, "specifyId", false, "SPECIFY_ID");
        public final static Property SpecifyName = new Property(2, String.class, "specifyName", false, "SPECIFY_NAME");
        public final static Property MaterialMultiple = new Property(3, Float.class, "materialMultiple", false, "MATERIAL_MULTIPLE");
        public final static Property PriceMultiple = new Property(4, Float.class, "priceMultiple", false, "PRICE_MULTIPLE");
    }


    public SpecifyEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SpecifyEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SPECIFY_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"SPECIFY_ID\" TEXT NOT NULL UNIQUE ," + // 1: specifyId
                "\"SPECIFY_NAME\" TEXT," + // 2: specifyName
                "\"MATERIAL_MULTIPLE\" REAL," + // 3: materialMultiple
                "\"PRICE_MULTIPLE\" REAL);"); // 4: priceMultiple
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SPECIFY_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, SpecifyEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getSpecifyId());
 
        String specifyName = entity.getSpecifyName();
        if (specifyName != null) {
            stmt.bindString(3, specifyName);
        }
 
        Float materialMultiple = entity.getMaterialMultiple();
        if (materialMultiple != null) {
            stmt.bindDouble(4, materialMultiple);
        }
 
        Float priceMultiple = entity.getPriceMultiple();
        if (priceMultiple != null) {
            stmt.bindDouble(5, priceMultiple);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public SpecifyEntity readEntity(Cursor cursor, int offset) {
        SpecifyEntity entity = new SpecifyEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // specifyId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // specifyName
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // materialMultiple
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4) // priceMultiple
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, SpecifyEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSpecifyId(cursor.getString(offset + 1));
        entity.setSpecifyName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMaterialMultiple(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setPriceMultiple(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(SpecifyEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(SpecifyEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
