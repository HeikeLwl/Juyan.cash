package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "UPLOAD_DATA_ENTITY".
*/
public class UploadDataEntityDao extends AbstractDao<UploadDataEntity, Long> {

    public static final String TABLENAME = "UPLOAD_DATA_ENTITY";

    /**
     * Properties of entity UploadDataEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UploadDataId = new Property(1, String.class, "uploadDataId", false, "UPLOAD_DATA_ID");
        public final static Property OrderId = new Property(2, String.class, "orderId", false, "ORDER_ID");
        public final static Property DataId = new Property(3, String.class, "dataId", false, "DATA_ID");
        public final static Property DataType = new Property(4, Integer.class, "dataType", false, "DATA_TYPE");
        public final static Property IsHand = new Property(5, Integer.class, "isHand", false, "IS_HAND");
        public final static Property Count = new Property(6, Integer.class, "count", false, "COUNT");
        public final static Property LastTime = new Property(7, Long.class, "lastTime", false, "LAST_TIME");
    }


    public UploadDataEntityDao(DaoConfig config) {
        super(config);
    }
    
    public UploadDataEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"UPLOAD_DATA_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"UPLOAD_DATA_ID\" TEXT NOT NULL UNIQUE ," + // 1: uploadDataId
                "\"ORDER_ID\" TEXT," + // 2: orderId
                "\"DATA_ID\" TEXT," + // 3: dataId
                "\"DATA_TYPE\" INTEGER," + // 4: dataType
                "\"IS_HAND\" INTEGER," + // 5: isHand
                "\"COUNT\" INTEGER," + // 6: count
                "\"LAST_TIME\" INTEGER);"); // 7: lastTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"UPLOAD_DATA_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, UploadDataEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getUploadDataId());
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(3, orderId);
        }
 
        String dataId = entity.getDataId();
        if (dataId != null) {
            stmt.bindString(4, dataId);
        }
 
        Integer dataType = entity.getDataType();
        if (dataType != null) {
            stmt.bindLong(5, dataType);
        }
 
        Integer isHand = entity.getIsHand();
        if (isHand != null) {
            stmt.bindLong(6, isHand);
        }
 
        Integer count = entity.getCount();
        if (count != null) {
            stmt.bindLong(7, count);
        }
 
        Long lastTime = entity.getLastTime();
        if (lastTime != null) {
            stmt.bindLong(8, lastTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public UploadDataEntity readEntity(Cursor cursor, int offset) {
        UploadDataEntity entity = new UploadDataEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // uploadDataId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // dataId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // dataType
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // isHand
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // count
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // lastTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, UploadDataEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUploadDataId(cursor.getString(offset + 1));
        entity.setOrderId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDataId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDataType(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setIsHand(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setCount(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setLastTime(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(UploadDataEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(UploadDataEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
