package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "DISH_SELECTED_MATERIAL_ENTITY".
*/
public class DishSelectedMaterialEntityDao extends AbstractDao<DishSelectedMaterialEntity, Long> {

    public static final String TABLENAME = "DISH_SELECTED_MATERIAL_ENTITY";

    /**
     * Properties of entity DishSelectedMaterialEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property DishSelectedMaterialId = new Property(1, String.class, "dishSelectedMaterialId", false, "DISH_SELECTED_MATERIAL_ID");
        public final static Property OrderId = new Property(2, String.class, "orderId", false, "ORDER_ID");
        public final static Property OrderDishId = new Property(3, String.class, "orderDishId", false, "ORDER_DISH_ID");
        public final static Property DishTypeMaterialId = new Property(4, String.class, "dishTypeMaterialId", false, "DISH_TYPE_MATERIAL_ID");
        public final static Property MaterialId = new Property(5, String.class, "materialId", false, "MATERIAL_ID");
        public final static Property MaterialName = new Property(6, String.class, "materialName", false, "MATERIAL_NAME");
        public final static Property MaterialPrice = new Property(7, Integer.class, "materialPrice", false, "MATERIAL_PRICE");
        public final static Property SelectedCount = new Property(8, Integer.class, "selectedCount", false, "SELECTED_COUNT");
        public final static Property TotalPrice = new Property(9, Integer.class, "totalPrice", false, "TOTAL_PRICE");
    };


    public DishSelectedMaterialEntityDao(DaoConfig config) {
        super(config);
    }
    
    public DishSelectedMaterialEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DISH_SELECTED_MATERIAL_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"DISH_SELECTED_MATERIAL_ID\" TEXT," + // 1: dishSelectedMaterialId
                "\"ORDER_ID\" TEXT," + // 2: orderId
                "\"ORDER_DISH_ID\" TEXT," + // 3: orderDishId
                "\"DISH_TYPE_MATERIAL_ID\" TEXT," + // 4: dishTypeMaterialId
                "\"MATERIAL_ID\" TEXT," + // 5: materialId
                "\"MATERIAL_NAME\" TEXT," + // 6: materialName
                "\"MATERIAL_PRICE\" INTEGER," + // 7: materialPrice
                "\"SELECTED_COUNT\" INTEGER," + // 8: selectedCount
                "\"TOTAL_PRICE\" INTEGER);"); // 9: totalPrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DISH_SELECTED_MATERIAL_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DishSelectedMaterialEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String dishSelectedMaterialId = entity.getDishSelectedMaterialId();
        if (dishSelectedMaterialId != null) {
            stmt.bindString(2, dishSelectedMaterialId);
        }
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(3, orderId);
        }
 
        String orderDishId = entity.getOrderDishId();
        if (orderDishId != null) {
            stmt.bindString(4, orderDishId);
        }
 
        String dishTypeMaterialId = entity.getDishTypeMaterialId();
        if (dishTypeMaterialId != null) {
            stmt.bindString(5, dishTypeMaterialId);
        }
 
        String materialId = entity.getMaterialId();
        if (materialId != null) {
            stmt.bindString(6, materialId);
        }
 
        String materialName = entity.getMaterialName();
        if (materialName != null) {
            stmt.bindString(7, materialName);
        }
 
        Integer materialPrice = entity.getMaterialPrice();
        if (materialPrice != null) {
            stmt.bindLong(8, materialPrice);
        }
 
        Integer selectedCount = entity.getSelectedCount();
        if (selectedCount != null) {
            stmt.bindLong(9, selectedCount);
        }
 
        Integer totalPrice = entity.getTotalPrice();
        if (totalPrice != null) {
            stmt.bindLong(10, totalPrice);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DishSelectedMaterialEntity readEntity(Cursor cursor, int offset) {
        DishSelectedMaterialEntity entity = new DishSelectedMaterialEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // dishSelectedMaterialId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orderDishId
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // dishTypeMaterialId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // materialId
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // materialName
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // materialPrice
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // selectedCount
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // totalPrice
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DishSelectedMaterialEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setDishSelectedMaterialId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setOrderId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrderDishId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setDishTypeMaterialId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setMaterialId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMaterialName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setMaterialPrice(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setSelectedCount(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setTotalPrice(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DishSelectedMaterialEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DishSelectedMaterialEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
