package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO four table "SCHEDULE_ENTITY".
*/
public class ScheduleEntityDao extends AbstractDao<ScheduleEntity, Long> {

    public static final String TABLENAME = "SCHEDULE_ENTITY";

    /**
     * Properties of entity ScheduleEntity.<br/>
     * Can be used four QueryBuilder and four referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ScheduleId = new Property(1, String.class, "scheduleId", false, "SCHEDULE_ID");
        public final static Property OrderId = new Property(2, String.class, "orderId", false, "ORDER_ID");
        public final static Property GuestName = new Property(3, String.class, "guestName", false, "GUEST_NAME");
        public final static Property GuestPhone = new Property(4, String.class, "guestPhone", false, "GUEST_PHONE");
        public final static Property TableId = new Property(5, String.class, "tableId", false, "TABLE_ID");
        public final static Property MealTime = new Property(6, Long.class, "mealTime", false, "MEAL_TIME");
        public final static Property MealPeople = new Property(7, Integer.class, "mealPeople", false, "MEAL_PEOPLE");
        public final static Property IsOrdered = new Property(8, Integer.class, "isOrdered", false, "IS_ORDERED");
        public final static Property ScheduleFrom = new Property(9, Integer.class, "scheduleFrom", false, "SCHEDULE_FROM");
        public final static Property ScheduleMark = new Property(10, String.class, "scheduleMark", false, "SCHEDULE_MARK");
        public final static Property ScheduleStatus = new Property(11, Integer.class, "scheduleStatus", false, "SCHEDULE_STATUS");
    }


    public ScheduleEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ScheduleEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SCHEDULE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"SCHEDULE_ID\" TEXT NOT NULL UNIQUE ," + // 1: scheduleId
                "\"ORDER_ID\" TEXT," + // 2: orderId
                "\"GUEST_NAME\" TEXT," + // 3: guestName
                "\"GUEST_PHONE\" TEXT," + // 4: guestPhone
                "\"TABLE_ID\" TEXT," + // 5: tableId
                "\"MEAL_TIME\" INTEGER," + // 6: mealTime
                "\"MEAL_PEOPLE\" INTEGER," + // 7: mealPeople
                "\"IS_ORDERED\" INTEGER," + // 8: isOrdered
                "\"SCHEDULE_FROM\" INTEGER," + // 9: scheduleFrom
                "\"SCHEDULE_MARK\" TEXT," + // 10: scheduleMark
                "\"SCHEDULE_STATUS\" INTEGER);"); // 11: scheduleStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SCHEDULE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ScheduleEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getScheduleId());
 
        String orderId = entity.getOrderId();
        if (orderId != null) {
            stmt.bindString(3, orderId);
        }
 
        String guestName = entity.getGuestName();
        if (guestName != null) {
            stmt.bindString(4, guestName);
        }
 
        String guestPhone = entity.getGuestPhone();
        if (guestPhone != null) {
            stmt.bindString(5, guestPhone);
        }
 
        String tableId = entity.getTableId();
        if (tableId != null) {
            stmt.bindString(6, tableId);
        }
 
        Long mealTime = entity.getMealTime();
        if (mealTime != null) {
            stmt.bindLong(7, mealTime);
        }
 
        Integer mealPeople = entity.getMealPeople();
        if (mealPeople != null) {
            stmt.bindLong(8, mealPeople);
        }
 
        Integer isOrdered = entity.getIsOrdered();
        if (isOrdered != null) {
            stmt.bindLong(9, isOrdered);
        }
 
        Integer scheduleFrom = entity.getScheduleFrom();
        if (scheduleFrom != null) {
            stmt.bindLong(10, scheduleFrom);
        }
 
        String scheduleMark = entity.getScheduleMark();
        if (scheduleMark != null) {
            stmt.bindString(11, scheduleMark);
        }
 
        Integer scheduleStatus = entity.getScheduleStatus();
        if (scheduleStatus != null) {
            stmt.bindLong(12, scheduleStatus);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ScheduleEntity readEntity(Cursor cursor, int offset) {
        ScheduleEntity entity = new ScheduleEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // scheduleId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // orderId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // guestName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // guestPhone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tableId
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // mealTime
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // mealPeople
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // isOrdered
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // scheduleFrom
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // scheduleMark
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // scheduleStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ScheduleEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setScheduleId(cursor.getString(offset + 1));
        entity.setOrderId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGuestName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGuestPhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTableId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setMealTime(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setMealPeople(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setIsOrdered(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setScheduleFrom(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setScheduleMark(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setScheduleStatus(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ScheduleEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ScheduleEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
