package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "EMPLOYEE_ENTITY".
*/
public class EmployeeEntityDao extends AbstractDao<EmployeeEntity, Long> {

    public static final String TABLENAME = "EMPLOYEE_ENTITY";

    /**
     * Properties of entity EmployeeEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property EmployeeId = new Property(1, String.class, "employeeId", false, "EMPLOYEE_ID");
        public final static Property RankId = new Property(2, String.class, "rankId", false, "RANK_ID");
        public final static Property EmployeeName = new Property(3, String.class, "employeeName", false, "EMPLOYEE_NAME");
        public final static Property EmployeePhone = new Property(4, String.class, "employeePhone", false, "EMPLOYEE_PHONE");
        public final static Property LoginName = new Property(5, String.class, "loginName", false, "LOGIN_NAME");
        public final static Property LoginPsd = new Property(6, String.class, "loginPsd", false, "LOGIN_PSD");
        public final static Property EmployeeSex = new Property(7, Integer.class, "employeeSex", false, "EMPLOYEE_SEX");
        public final static Property EmployeeHead = new Property(8, String.class, "employeeHead", false, "EMPLOYEE_HEAD");
        public final static Property IsSellCard = new Property(9, Integer.class, "isSellCard", false, "IS_SELL_CARD");
        public final static Property AllowDiscountBargain = new Property(10, Integer.class, "allowDiscountBargain", false, "ALLOW_DISCOUNT_BARGAIN");
        public final static Property BargainMinPayment = new Property(11, Integer.class, "bargainMinPayment", false, "BARGAIN_MIN_PAYMENT");
        public final static Property AllowDiscountNotBargain = new Property(12, Integer.class, "allowDiscountNotBargain", false, "ALLOW_DISCOUNT_NOT_BARGAIN");
        public final static Property NotBargainMinPayment = new Property(13, Integer.class, "notBargainMinPayment", false, "NOT_BARGAIN_MIN_PAYMENT");
        public final static Property IsLimitedPrintCount = new Property(14, Integer.class, "isLimitedPrintCount", false, "IS_LIMITED_PRINT_COUNT");
        public final static Property MaxPrintCount = new Property(15, Integer.class, "maxPrintCount", false, "MAX_PRINT_COUNT");
        public final static Property IsLimitedResetAmount = new Property(16, Integer.class, "isLimitedResetAmount", false, "IS_LIMITED_RESET_AMOUNT");
        public final static Property MaxResetAmount = new Property(17, Float.class, "maxResetAmount", false, "MAX_RESET_AMOUNT");
        public final static Property AuthCashier = new Property(18, Integer.class, "authCashier", false, "AUTH_CASHIER");
        public final static Property AuthRetreat = new Property(19, Integer.class, "authRetreat", false, "AUTH_RETREAT");
        public final static Property AuthPresent = new Property(20, Integer.class, "authPresent", false, "AUTH_PRESENT");
        public final static Property AuthReturnOrder = new Property(21, Integer.class, "authReturnOrder", false, "AUTH_RETURN_ORDER");
        public final static Property AuthClearPrintHistory = new Property(22, Integer.class, "authClearPrintHistory", false, "AUTH_CLEAR_PRINT_HISTORY");
        public final static Property AuthBillAccount = new Property(23, Integer.class, "authBillAccount", false, "AUTH_BILL_ACCOUNT");
        public final static Property IsUseIDCard = new Property(24, Integer.class, "isUseIDCard", false, "IS_USE_IDCARD");
        public final static Property IDCardNumber = new Property(25, String.class, "IDCardNumber", false, "IDCARD_NUMBER");
        public final static Property IsReturnSomeOrder = new Property(26, Integer.class, "isReturnSomeOrder", false, "IS_RETURN_SOME_ORDER");
        public final static Property IsRetrurnAllOrder = new Property(27, Integer.class, "isRetrurnAllOrder", false, "IS_RETRURN_ALL_ORDER");
        public final static Property IsBindVip = new Property(28, Integer.class, "isBindVip", false, "IS_BIND_VIP");
    };


    public EmployeeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public EmployeeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"EMPLOYEE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"EMPLOYEE_ID\" TEXT NOT NULL UNIQUE ," + // 1: employeeId
                "\"RANK_ID\" TEXT," + // 2: rankId
                "\"EMPLOYEE_NAME\" TEXT," + // 3: employeeName
                "\"EMPLOYEE_PHONE\" TEXT," + // 4: employeePhone
                "\"LOGIN_NAME\" TEXT," + // 5: loginName
                "\"LOGIN_PSD\" TEXT," + // 6: loginPsd
                "\"EMPLOYEE_SEX\" INTEGER," + // 7: employeeSex
                "\"EMPLOYEE_HEAD\" TEXT," + // 8: employeeHead
                "\"IS_SELL_CARD\" INTEGER," + // 9: isSellCard
                "\"ALLOW_DISCOUNT_BARGAIN\" INTEGER," + // 10: allowDiscountBargain
                "\"BARGAIN_MIN_PAYMENT\" INTEGER," + // 11: bargainMinPayment
                "\"ALLOW_DISCOUNT_NOT_BARGAIN\" INTEGER," + // 12: allowDiscountNotBargain
                "\"NOT_BARGAIN_MIN_PAYMENT\" INTEGER," + // 13: notBargainMinPayment
                "\"IS_LIMITED_PRINT_COUNT\" INTEGER," + // 14: isLimitedPrintCount
                "\"MAX_PRINT_COUNT\" INTEGER," + // 15: maxPrintCount
                "\"IS_LIMITED_RESET_AMOUNT\" INTEGER," + // 16: isLimitedResetAmount
                "\"MAX_RESET_AMOUNT\" REAL," + // 17: maxResetAmount
                "\"AUTH_CASHIER\" INTEGER," + // 18: authCashier
                "\"AUTH_RETREAT\" INTEGER," + // 19: authRetreat
                "\"AUTH_PRESENT\" INTEGER," + // 20: authPresent
                "\"AUTH_RETURN_ORDER\" INTEGER," + // 21: authReturnOrder
                "\"AUTH_CLEAR_PRINT_HISTORY\" INTEGER," + // 22: authClearPrintHistory
                "\"AUTH_BILL_ACCOUNT\" INTEGER," + // 23: authBillAccount
                "\"IS_USE_IDCARD\" INTEGER," + // 24: isUseIDCard
                "\"IDCARD_NUMBER\" TEXT," + // 25: IDCardNumber
                "\"IS_RETURN_SOME_ORDER\" INTEGER," + // 26: isReturnSomeOrder
                "\"IS_RETRURN_ALL_ORDER\" INTEGER," + // 27: isRetrurnAllOrder
                "\"IS_BIND_VIP\" INTEGER);"); // 28: isBindVip
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"EMPLOYEE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, EmployeeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getEmployeeId());
 
        String rankId = entity.getRankId();
        if (rankId != null) {
            stmt.bindString(3, rankId);
        }
 
        String employeeName = entity.getEmployeeName();
        if (employeeName != null) {
            stmt.bindString(4, employeeName);
        }
 
        String employeePhone = entity.getEmployeePhone();
        if (employeePhone != null) {
            stmt.bindString(5, employeePhone);
        }
 
        String loginName = entity.getLoginName();
        if (loginName != null) {
            stmt.bindString(6, loginName);
        }
 
        String loginPsd = entity.getLoginPsd();
        if (loginPsd != null) {
            stmt.bindString(7, loginPsd);
        }
 
        Integer employeeSex = entity.getEmployeeSex();
        if (employeeSex != null) {
            stmt.bindLong(8, employeeSex);
        }
 
        String employeeHead = entity.getEmployeeHead();
        if (employeeHead != null) {
            stmt.bindString(9, employeeHead);
        }
 
        Integer isSellCard = entity.getIsSellCard();
        if (isSellCard != null) {
            stmt.bindLong(10, isSellCard);
        }
 
        Integer allowDiscountBargain = entity.getAllowDiscountBargain();
        if (allowDiscountBargain != null) {
            stmt.bindLong(11, allowDiscountBargain);
        }
 
        Integer bargainMinPayment = entity.getBargainMinPayment();
        if (bargainMinPayment != null) {
            stmt.bindLong(12, bargainMinPayment);
        }
 
        Integer allowDiscountNotBargain = entity.getAllowDiscountNotBargain();
        if (allowDiscountNotBargain != null) {
            stmt.bindLong(13, allowDiscountNotBargain);
        }
 
        Integer notBargainMinPayment = entity.getNotBargainMinPayment();
        if (notBargainMinPayment != null) {
            stmt.bindLong(14, notBargainMinPayment);
        }
 
        Integer isLimitedPrintCount = entity.getIsLimitedPrintCount();
        if (isLimitedPrintCount != null) {
            stmt.bindLong(15, isLimitedPrintCount);
        }
 
        Integer maxPrintCount = entity.getMaxPrintCount();
        if (maxPrintCount != null) {
            stmt.bindLong(16, maxPrintCount);
        }
 
        Integer isLimitedResetAmount = entity.getIsLimitedResetAmount();
        if (isLimitedResetAmount != null) {
            stmt.bindLong(17, isLimitedResetAmount);
        }
 
        Float maxResetAmount = entity.getMaxResetAmount();
        if (maxResetAmount != null) {
            stmt.bindDouble(18, maxResetAmount);
        }
 
        Integer authCashier = entity.getAuthCashier();
        if (authCashier != null) {
            stmt.bindLong(19, authCashier);
        }
 
        Integer authRetreat = entity.getAuthRetreat();
        if (authRetreat != null) {
            stmt.bindLong(20, authRetreat);
        }
 
        Integer authPresent = entity.getAuthPresent();
        if (authPresent != null) {
            stmt.bindLong(21, authPresent);
        }
 
        Integer authReturnOrder = entity.getAuthReturnOrder();
        if (authReturnOrder != null) {
            stmt.bindLong(22, authReturnOrder);
        }
 
        Integer authClearPrintHistory = entity.getAuthClearPrintHistory();
        if (authClearPrintHistory != null) {
            stmt.bindLong(23, authClearPrintHistory);
        }
 
        Integer authBillAccount = entity.getAuthBillAccount();
        if (authBillAccount != null) {
            stmt.bindLong(24, authBillAccount);
        }
 
        Integer isUseIDCard = entity.getIsUseIDCard();
        if (isUseIDCard != null) {
            stmt.bindLong(25, isUseIDCard);
        }
 
        String IDCardNumber = entity.getIDCardNumber();
        if (IDCardNumber != null) {
            stmt.bindString(26, IDCardNumber);
        }
 
        Integer isReturnSomeOrder = entity.getIsReturnSomeOrder();
        if (isReturnSomeOrder != null) {
            stmt.bindLong(27, isReturnSomeOrder);
        }
 
        Integer isRetrurnAllOrder = entity.getIsRetrurnAllOrder();
        if (isRetrurnAllOrder != null) {
            stmt.bindLong(28, isRetrurnAllOrder);
        }
 
        Integer isBindVip = entity.getIsBindVip();
        if (isBindVip != null) {
            stmt.bindLong(29, isBindVip);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public EmployeeEntity readEntity(Cursor cursor, int offset) {
        EmployeeEntity entity = new EmployeeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // employeeId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // rankId
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // employeeName
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // employeePhone
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // loginName
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // loginPsd
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // employeeSex
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // employeeHead
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // isSellCard
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // allowDiscountBargain
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // bargainMinPayment
            cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // allowDiscountNotBargain
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // notBargainMinPayment
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // isLimitedPrintCount
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // maxPrintCount
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // isLimitedResetAmount
            cursor.isNull(offset + 17) ? null : cursor.getFloat(offset + 17), // maxResetAmount
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // authCashier
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // authRetreat
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // authPresent
            cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21), // authReturnOrder
            cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22), // authClearPrintHistory
            cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23), // authBillAccount
            cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24), // isUseIDCard
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // IDCardNumber
            cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26), // isReturnSomeOrder
            cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27), // isRetrurnAllOrder
            cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28) // isBindVip
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, EmployeeEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setEmployeeId(cursor.getString(offset + 1));
        entity.setRankId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setEmployeeName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setEmployeePhone(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setLoginName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLoginPsd(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setEmployeeSex(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setEmployeeHead(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIsSellCard(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setAllowDiscountBargain(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setBargainMinPayment(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setAllowDiscountNotBargain(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setNotBargainMinPayment(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setIsLimitedPrintCount(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setMaxPrintCount(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setIsLimitedResetAmount(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setMaxResetAmount(cursor.isNull(offset + 17) ? null : cursor.getFloat(offset + 17));
        entity.setAuthCashier(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setAuthRetreat(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setAuthPresent(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setAuthReturnOrder(cursor.isNull(offset + 21) ? null : cursor.getInt(offset + 21));
        entity.setAuthClearPrintHistory(cursor.isNull(offset + 22) ? null : cursor.getInt(offset + 22));
        entity.setAuthBillAccount(cursor.isNull(offset + 23) ? null : cursor.getInt(offset + 23));
        entity.setIsUseIDCard(cursor.isNull(offset + 24) ? null : cursor.getInt(offset + 24));
        entity.setIDCardNumber(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setIsReturnSomeOrder(cursor.isNull(offset + 26) ? null : cursor.getInt(offset + 26));
        entity.setIsRetrurnAllOrder(cursor.isNull(offset + 27) ? null : cursor.getInt(offset + 27));
        entity.setIsBindVip(cursor.isNull(offset + 28) ? null : cursor.getInt(offset + 28));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(EmployeeEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(EmployeeEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
