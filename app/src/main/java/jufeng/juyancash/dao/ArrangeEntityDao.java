package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO four table "ARRANGE_ENTITY".
*/
public class ArrangeEntityDao extends AbstractDao<ArrangeEntity, Long> {

    public static final String TABLENAME = "ARRANGE_ENTITY";

    /**
     * Properties of entity ArrangeEntity.<br/>
     * Can be used four QueryBuilder and four referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ArrangeId = new Property(1, String.class, "arrangeId", false, "ARRANGE_ID");
        public final static Property RemainCount = new Property(2, Integer.class, "remainCount", false, "REMAIN_COUNT");
        public final static Property Tel = new Property(3, String.class, "tel", false, "TEL");
        public final static Property ArrangeNumber = new Property(4, String.class, "arrangeNumber", false, "ARRANGE_NUMBER");
        public final static Property SignTime = new Property(5, Long.class, "signTime", false, "SIGN_TIME");
        public final static Property MealPeople = new Property(6, Integer.class, "mealPeople", false, "MEAL_PEOPLE");
        public final static Property ArrangeStatus = new Property(7, Integer.class, "arrangeStatus", false, "ARRANGE_STATUS");
    }


    public ArrangeEntityDao(DaoConfig config) {
        super(config);
    }
    
    public ArrangeEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ARRANGE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"ARRANGE_ID\" TEXT NOT NULL UNIQUE ," + // 1: arrangeId
                "\"REMAIN_COUNT\" INTEGER," + // 2: remainCount
                "\"TEL\" TEXT," + // 3: tel
                "\"ARRANGE_NUMBER\" TEXT," + // 4: arrangeNumber
                "\"SIGN_TIME\" INTEGER," + // 5: signTime
                "\"MEAL_PEOPLE\" INTEGER," + // 6: mealPeople
                "\"ARRANGE_STATUS\" INTEGER);"); // 7: arrangeStatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ARRANGE_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ArrangeEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getArrangeId());
 
        Integer remainCount = entity.getRemainCount();
        if (remainCount != null) {
            stmt.bindLong(3, remainCount);
        }
 
        String tel = entity.getTel();
        if (tel != null) {
            stmt.bindString(4, tel);
        }
 
        String arrangeNumber = entity.getArrangeNumber();
        if (arrangeNumber != null) {
            stmt.bindString(5, arrangeNumber);
        }
 
        Long signTime = entity.getSignTime();
        if (signTime != null) {
            stmt.bindLong(6, signTime);
        }
 
        Integer mealPeople = entity.getMealPeople();
        if (mealPeople != null) {
            stmt.bindLong(7, mealPeople);
        }
 
        Integer arrangeStatus = entity.getArrangeStatus();
        if (arrangeStatus != null) {
            stmt.bindLong(8, arrangeStatus);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ArrangeEntity readEntity(Cursor cursor, int offset) {
        ArrangeEntity entity = new ArrangeEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // arrangeId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // remainCount
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // tel
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // arrangeNumber
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // signTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // mealPeople
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7) // arrangeStatus
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ArrangeEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setArrangeId(cursor.getString(offset + 1));
        entity.setRemainCount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTel(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setArrangeNumber(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSignTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setMealPeople(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setArrangeStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ArrangeEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ArrangeEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
