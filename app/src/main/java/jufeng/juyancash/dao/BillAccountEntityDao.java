package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO four table "BILL_ACCOUNT_ENTITY".
*/
public class BillAccountEntityDao extends AbstractDao<BillAccountEntity, Long> {

    public static final String TABLENAME = "BILL_ACCOUNT_ENTITY";

    /**
     * Properties of entity BillAccountEntity.<br/>
     * Can be used four QueryBuilder and four referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property BillAccountId = new Property(1, String.class, "billAccountId", false, "BILL_ACCOUNT_ID");
        public final static Property PayType = new Property(2, Integer.class, "payType", false, "PAY_TYPE");
        public final static Property BillAccountName = new Property(3, String.class, "billAccountName", false, "BILL_ACCOUNT_NAME");
        public final static Property IsSale = new Property(4, Integer.class, "isSale", false, "IS_SALE");
        public final static Property CreateTime = new Property(5, String.class, "createTime", false, "CREATE_TIME");
    }


    public BillAccountEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BillAccountEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BILL_ACCOUNT_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"BILL_ACCOUNT_ID\" TEXT," + // 1: billAccountId
                "\"PAY_TYPE\" INTEGER," + // 2: payType
                "\"BILL_ACCOUNT_NAME\" TEXT," + // 3: billAccountName
                "\"IS_SALE\" INTEGER," + // 4: isSale
                "\"CREATE_TIME\" TEXT);"); // 5: createTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BILL_ACCOUNT_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BillAccountEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String billAccountId = entity.getBillAccountId();
        if (billAccountId != null) {
            stmt.bindString(2, billAccountId);
        }
 
        Integer payType = entity.getPayType();
        if (payType != null) {
            stmt.bindLong(3, payType);
        }
 
        String billAccountName = entity.getBillAccountName();
        if (billAccountName != null) {
            stmt.bindString(4, billAccountName);
        }
 
        Integer isSale = entity.getIsSale();
        if (isSale != null) {
            stmt.bindLong(5, isSale);
        }
 
        String createTime = entity.getCreateTime();
        if (createTime != null) {
            stmt.bindString(6, createTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BillAccountEntity readEntity(Cursor cursor, int offset) {
        BillAccountEntity entity = new BillAccountEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // billAccountId
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // payType
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // billAccountName
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // isSale
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // createTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BillAccountEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBillAccountId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPayType(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setBillAccountName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setIsSale(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCreateTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BillAccountEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BillAccountEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
