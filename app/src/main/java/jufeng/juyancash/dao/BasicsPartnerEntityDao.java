package jufeng.juyancash.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO four table "BASICS_PARTNER_ENTITY".
*/
public class BasicsPartnerEntityDao extends AbstractDao<BasicsPartnerEntity, Long> {

    public static final String TABLENAME = "BASICS_PARTNER_ENTITY";

    /**
     * Properties of entity BasicsPartnerEntity.<br/>
     * Can be used four QueryBuilder and four referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PartnerCode = new Property(1, String.class, "partnerCode", false, "PARTNER_CODE");
        public final static Property PartnerName = new Property(2, String.class, "partnerName", false, "PARTNER_NAME");
        public final static Property PartnerPassword = new Property(3, String.class, "partnerPassword", false, "PARTNER_PASSWORD");
        public final static Property PartnerEmail = new Property(4, String.class, "partnerEmail", false, "PARTNER_EMAIL");
        public final static Property PartnerContacts = new Property(5, String.class, "partnerContacts", false, "PARTNER_CONTACTS");
        public final static Property PartnerPhone = new Property(6, String.class, "partnerPhone", false, "PARTNER_PHONE");
        public final static Property PartnerCreateTime = new Property(7, String.class, "partnerCreateTime", false, "PARTNER_CREATE_TIME");
    }


    public BasicsPartnerEntityDao(DaoConfig config) {
        super(config);
    }
    
    public BasicsPartnerEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BASICS_PARTNER_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"PARTNER_CODE\" TEXT," + // 1: partnerCode
                "\"PARTNER_NAME\" TEXT," + // 2: partnerName
                "\"PARTNER_PASSWORD\" TEXT," + // 3: partnerPassword
                "\"PARTNER_EMAIL\" TEXT," + // 4: partnerEmail
                "\"PARTNER_CONTACTS\" TEXT," + // 5: partnerContacts
                "\"PARTNER_PHONE\" TEXT," + // 6: partnerPhone
                "\"PARTNER_CREATE_TIME\" TEXT);"); // 7: partnerCreateTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BASICS_PARTNER_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BasicsPartnerEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String partnerCode = entity.getPartnerCode();
        if (partnerCode != null) {
            stmt.bindString(2, partnerCode);
        }
 
        String partnerName = entity.getPartnerName();
        if (partnerName != null) {
            stmt.bindString(3, partnerName);
        }
 
        String partnerPassword = entity.getPartnerPassword();
        if (partnerPassword != null) {
            stmt.bindString(4, partnerPassword);
        }
 
        String partnerEmail = entity.getPartnerEmail();
        if (partnerEmail != null) {
            stmt.bindString(5, partnerEmail);
        }
 
        String partnerContacts = entity.getPartnerContacts();
        if (partnerContacts != null) {
            stmt.bindString(6, partnerContacts);
        }
 
        String partnerPhone = entity.getPartnerPhone();
        if (partnerPhone != null) {
            stmt.bindString(7, partnerPhone);
        }
 
        String partnerCreateTime = entity.getPartnerCreateTime();
        if (partnerCreateTime != null) {
            stmt.bindString(8, partnerCreateTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BasicsPartnerEntity readEntity(Cursor cursor, int offset) {
        BasicsPartnerEntity entity = new BasicsPartnerEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // partnerCode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // partnerName
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // partnerPassword
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // partnerEmail
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // partnerContacts
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // partnerPhone
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // partnerCreateTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BasicsPartnerEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPartnerCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPartnerName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPartnerPassword(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPartnerEmail(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPartnerContacts(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setPartnerPhone(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPartnerCreateTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BasicsPartnerEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BasicsPartnerEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
